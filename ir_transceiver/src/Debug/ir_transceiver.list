
ir_transceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a90  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001c38  08001c38  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001c38  08001c38  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001c38  08001c38  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c38  08001c38  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c38  08001c38  00011c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c3c  08001c3c  00011c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000064  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001fea  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000836  00000000  00000000  0002202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  00022868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  00022a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b4a  00000000  00000000  00022c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000333d  00000000  00000000  0002577a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a67b  00000000  00000000  00028ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00033132  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006f8  00000000  00000000  00033184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000014 	.word	0x20000014
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001c20 	.word	0x08001c20

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000018 	.word	0x20000018
 80001e4:	08001c20 	.word	0x08001c20

080001e8 <main>:
void delay(uint32_t num);

USART_Handle_t usart_handle_tx, usart_handle_rx;

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	Keypad_Init();
 80001ee:	f000 f8e6 	bl	80003be <Keypad_Init>
	LCD_Init();
 80001f2:	f000 faa5 	bl	8000740 <LCD_Init>

	USART_GPIO_INIT();
 80001f6:	f000 f893 	bl	8000320 <USART_GPIO_INIT>
	USART_TX_INIT();
 80001fa:	f000 f831 	bl	8000260 <USART_TX_INIT>
	USART_RX_INIT();
 80001fe:	f000 f85f 	bl	80002c0 <USART_RX_INIT>
	uint8_t msg_tx[1], msg_rx[1];

	while(1)
	{
		// TX ROUTINE: Send keypad data to TX pin
		msg_tx[0] = Keypad_Scan();
 8000202:	f000 f991 	bl	8000528 <Keypad_Scan>
 8000206:	4603      	mov	r3, r0
 8000208:	713b      	strb	r3, [r7, #4]
		while(USART_SendDataIT(&usart_handle_tx, (uint8_t*)msg_tx, 1) != USART_READY);
 800020a:	bf00      	nop
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2201      	movs	r2, #1
 8000210:	4619      	mov	r1, r3
 8000212:	4811      	ldr	r0, [pc, #68]	; (8000258 <main+0x70>)
 8000214:	f001 f9b6 	bl	8001584 <USART_SendDataIT>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d1f6      	bne.n	800020c <main+0x24>
		USART_SendData(&usart_handle_tx, (uint8_t*)msg_tx, 1);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2201      	movs	r2, #1
 8000222:	4619      	mov	r1, r3
 8000224:	480c      	ldr	r0, [pc, #48]	; (8000258 <main+0x70>)
 8000226:	f001 f907 	bl	8001438 <USART_SendData>

		// RX ROUTINE: Send RX data to LCD
		while(USART_ReceiveDataIT(&usart_handle_rx, (uint8_t*)msg_rx, 1) != USART_READY);
 800022a:	bf00      	nop
 800022c:	463b      	mov	r3, r7
 800022e:	2201      	movs	r2, #1
 8000230:	4619      	mov	r1, r3
 8000232:	480a      	ldr	r0, [pc, #40]	; (800025c <main+0x74>)
 8000234:	f001 f9d4 	bl	80015e0 <USART_ReceiveDataIT>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1f6      	bne.n	800022c <main+0x44>
		USART_ReceiveData(&usart_handle_rx, (uint8_t*)msg_rx, 1);
 800023e:	463b      	mov	r3, r7
 8000240:	2201      	movs	r2, #1
 8000242:	4619      	mov	r1, r3
 8000244:	4805      	ldr	r0, [pc, #20]	; (800025c <main+0x74>)
 8000246:	f001 f945 	bl	80014d4 <USART_ReceiveData>
		LCD_Data((uint8_t*)msg_rx);
 800024a:	463b      	mov	r3, r7
 800024c:	b2db      	uxtb	r3, r3
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fc32 	bl	8000ab8 <LCD_Data>
		msg_tx[0] = Keypad_Scan();
 8000254:	e7d5      	b.n	8000202 <main+0x1a>
 8000256:	bf00      	nop
 8000258:	20000030 	.word	0x20000030
 800025c:	20000054 	.word	0x20000054

08000260 <USART_TX_INIT>:
	return 0;
}


void USART_TX_INIT(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	// Set for TX
	USART_PeriClockControl(USART2, ENABLE);
 8000264:	2101      	movs	r1, #1
 8000266:	4814      	ldr	r0, [pc, #80]	; (80002b8 <USART_TX_INIT+0x58>)
 8000268:	f001 f846 	bl	80012f8 <USART_PeriClockControl>

	usart_handle_tx.pUSARTx = USART2;
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <USART_TX_INIT+0x5c>)
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <USART_TX_INIT+0x58>)
 8000270:	601a      	str	r2, [r3, #0]
	usart_handle_tx.USART_Config.USART_Baud = USART_STD_BAUD_1200;
 8000272:	4b12      	ldr	r3, [pc, #72]	; (80002bc <USART_TX_INIT+0x5c>)
 8000274:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000278:	609a      	str	r2, [r3, #8]
	usart_handle_tx.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800027a:	4b10      	ldr	r3, [pc, #64]	; (80002bc <USART_TX_INIT+0x5c>)
 800027c:	2200      	movs	r2, #0
 800027e:	73da      	strb	r2, [r3, #15]
	usart_handle_tx.USART_Config.USART_Mode = USART_MODE_TX;
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <USART_TX_INIT+0x5c>)
 8000282:	2201      	movs	r2, #1
 8000284:	711a      	strb	r2, [r3, #4]
	usart_handle_tx.USART_Config.USART_StopBitNum = USART_STOPBITS_1;
 8000286:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <USART_TX_INIT+0x5c>)
 8000288:	2200      	movs	r2, #0
 800028a:	731a      	strb	r2, [r3, #12]
	usart_handle_tx.USART_Config.USART_WordLength = USART_WORDLENGTH_8;
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <USART_TX_INIT+0x5c>)
 800028e:	2200      	movs	r2, #0
 8000290:	735a      	strb	r2, [r3, #13]
	usart_handle_tx.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <USART_TX_INIT+0x5c>)
 8000294:	2200      	movs	r2, #0
 8000296:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart_handle_tx);
 8000298:	4808      	ldr	r0, [pc, #32]	; (80002bc <USART_TX_INIT+0x5c>)
 800029a:	f000 ffa7 	bl	80011ec <USART_Init>

	USART_IRQInterruptConfig(IRQ_NUM_USART2, ENABLE);
 800029e:	2101      	movs	r1, #1
 80002a0:	2026      	movs	r0, #38	; 0x26
 80002a2:	f001 f9c3 	bl	800162c <USART_IRQInterruptConfig>
	USART_IRQHandling(&usart_handle_tx);
 80002a6:	4805      	ldr	r0, [pc, #20]	; (80002bc <USART_TX_INIT+0x5c>)
 80002a8:	f001 fa46 	bl	8001738 <USART_IRQHandling>
	USART_PeripheralControl(USART2, ENABLE);
 80002ac:	2101      	movs	r1, #1
 80002ae:	4802      	ldr	r0, [pc, #8]	; (80002b8 <USART_TX_INIT+0x58>)
 80002b0:	f001 fc56 	bl	8001b60 <USART_PeripheralControl>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40004400 	.word	0x40004400
 80002bc:	20000030 	.word	0x20000030

080002c0 <USART_RX_INIT>:


void USART_RX_INIT(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	// Set for RX
	USART_PeriClockControl(USART3, ENABLE);
 80002c4:	2101      	movs	r1, #1
 80002c6:	4814      	ldr	r0, [pc, #80]	; (8000318 <USART_RX_INIT+0x58>)
 80002c8:	f001 f816 	bl	80012f8 <USART_PeriClockControl>

	usart_handle_rx.pUSARTx = USART3;
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <USART_RX_INIT+0x5c>)
 80002ce:	4a12      	ldr	r2, [pc, #72]	; (8000318 <USART_RX_INIT+0x58>)
 80002d0:	601a      	str	r2, [r3, #0]
	usart_handle_rx.USART_Config.USART_Baud = USART_STD_BAUD_1200;
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <USART_RX_INIT+0x5c>)
 80002d4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80002d8:	609a      	str	r2, [r3, #8]
	usart_handle_rx.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <USART_RX_INIT+0x5c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	73da      	strb	r2, [r3, #15]
	usart_handle_rx.USART_Config.USART_Mode = USART_MODE_RX;
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <USART_RX_INIT+0x5c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	711a      	strb	r2, [r3, #4]
	usart_handle_rx.USART_Config.USART_StopBitNum = USART_STOPBITS_1;
 80002e6:	4b0d      	ldr	r3, [pc, #52]	; (800031c <USART_RX_INIT+0x5c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	731a      	strb	r2, [r3, #12]
	usart_handle_rx.USART_Config.USART_WordLength = USART_WORDLENGTH_8;
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <USART_RX_INIT+0x5c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	735a      	strb	r2, [r3, #13]
	usart_handle_rx.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <USART_RX_INIT+0x5c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart_handle_rx);
 80002f8:	4808      	ldr	r0, [pc, #32]	; (800031c <USART_RX_INIT+0x5c>)
 80002fa:	f000 ff77 	bl	80011ec <USART_Init>

	USART_IRQInterruptConfig(IRQ_NUM_USART3, ENABLE);
 80002fe:	2101      	movs	r1, #1
 8000300:	2027      	movs	r0, #39	; 0x27
 8000302:	f001 f993 	bl	800162c <USART_IRQInterruptConfig>
	USART_IRQHandling(&usart_handle_rx);
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <USART_RX_INIT+0x5c>)
 8000308:	f001 fa16 	bl	8001738 <USART_IRQHandling>
	USART_PeripheralControl(USART3, ENABLE);
 800030c:	2101      	movs	r1, #1
 800030e:	4802      	ldr	r0, [pc, #8]	; (8000318 <USART_RX_INIT+0x58>)
 8000310:	f001 fc26 	bl	8001b60 <USART_PeripheralControl>
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40004800 	.word	0x40004800
 800031c:	20000054 	.word	0x20000054

08000320 <USART_GPIO_INIT>:


void USART_GPIO_INIT(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpio;

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000326:	2101      	movs	r1, #1
 8000328:	480f      	ldr	r0, [pc, #60]	; (8000368 <USART_GPIO_INIT+0x48>)
 800032a:	f000 fd61 	bl	8000df0 <GPIO_PeriClockControl>

	usart_gpio.pGPIOx = GPIOA;
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <USART_GPIO_INIT+0x48>)
 8000330:	607b      	str	r3, [r7, #4]
	usart_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALT_FN;
 8000332:	2302      	movs	r3, #2
 8000334:	727b      	strb	r3, [r7, #9]
	usart_gpio.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 8000336:	2300      	movs	r3, #0
 8000338:	733b      	strb	r3, [r7, #12]
	usart_gpio.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_PIN_PU;
 800033a:	2301      	movs	r3, #1
 800033c:	72fb      	strb	r3, [r7, #11]
	usart_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800033e:	2302      	movs	r3, #2
 8000340:	72bb      	strb	r3, [r7, #10]
	usart_gpio.GPIO_PinConfig.GPIO_PinAltFuncMode = 7;
 8000342:	2307      	movs	r3, #7
 8000344:	737b      	strb	r3, [r7, #13]

	// USART TX
	usart_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_2;
 8000346:	2302      	movs	r3, #2
 8000348:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpio);
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fc7c 	bl	8000c4a <GPIO_Init>

	// USART RX
	usart_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_3;
 8000352:	2303      	movs	r3, #3
 8000354:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpio);
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f000 fc76 	bl	8000c4a <GPIO_Init>
}
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40020000 	.word	0x40020000

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000370:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039a:	f001 fc1d 	bl	8001bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff ff23 	bl	80001e8 <main>

080003a2 <LoopForever>:

LoopForever:
    b LoopForever
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
  ldr   r0, =_estack
 80003a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80003b0:	08001c40 	.word	0x08001c40
  ldr r2, =_sbss
 80003b4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80003b8:	20000078 	.word	0x20000078

080003bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC_IRQHandler>

080003be <Keypad_Init>:
 */

#include "keypad_driver.h"

void Keypad_Init(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
	Keypad_PORTS_Init();
 80003c2:	f000 f803 	bl	80003cc <Keypad_PORTS_Init>
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <Keypad_PORTS_Init>:


void Keypad_PORTS_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b098      	sub	sp, #96	; 0x60
 80003d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpio_padRow0;
	gpio_padRow0.pGPIOx = GPIOE;
 80003d2:	4b54      	ldr	r3, [pc, #336]	; (8000524 <Keypad_PORTS_Init+0x158>)
 80003d4:	657b      	str	r3, [r7, #84]	; 0x54
	gpio_padRow0.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_7;
 80003d6:	2307      	movs	r3, #7
 80003d8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	gpio_padRow0.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80003dc:	2301      	movs	r3, #1
 80003de:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	gpio_padRow0.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 80003e2:	2303      	movs	r3, #3
 80003e4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	gpio_padRow0.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 80003e8:	2300      	movs	r3, #0
 80003ea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	gpio_padRow0.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 80003ee:	2300      	movs	r3, #0
 80003f0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	GPIO_Handle_t gpio_padRow1;
	gpio_padRow1.pGPIOx = GPIOE;
 80003f4:	4b4b      	ldr	r3, [pc, #300]	; (8000524 <Keypad_PORTS_Init+0x158>)
 80003f6:	64bb      	str	r3, [r7, #72]	; 0x48
	gpio_padRow1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_8;
 80003f8:	2308      	movs	r3, #8
 80003fa:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	gpio_padRow1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80003fe:	2301      	movs	r3, #1
 8000400:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	gpio_padRow1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 8000404:	2303      	movs	r3, #3
 8000406:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	gpio_padRow1.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 800040a:	2300      	movs	r3, #0
 800040c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	gpio_padRow1.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 8000410:	2300      	movs	r3, #0
 8000412:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	GPIO_Handle_t gpio_padRow2;
	gpio_padRow2.pGPIOx = GPIOE;
 8000416:	4b43      	ldr	r3, [pc, #268]	; (8000524 <Keypad_PORTS_Init+0x158>)
 8000418:	63fb      	str	r3, [r7, #60]	; 0x3c
	gpio_padRow2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_9;
 800041a:	2309      	movs	r3, #9
 800041c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	gpio_padRow2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000420:	2301      	movs	r3, #1
 8000422:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	gpio_padRow2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 8000426:	2303      	movs	r3, #3
 8000428:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	gpio_padRow2.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 800042c:	2300      	movs	r3, #0
 800042e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	gpio_padRow2.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 8000432:	2300      	movs	r3, #0
 8000434:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	GPIO_Handle_t gpio_padRow3;
	gpio_padRow3.pGPIOx = GPIOE;
 8000438:	4b3a      	ldr	r3, [pc, #232]	; (8000524 <Keypad_PORTS_Init+0x158>)
 800043a:	633b      	str	r3, [r7, #48]	; 0x30
	gpio_padRow3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_10;
 800043c:	230a      	movs	r3, #10
 800043e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	gpio_padRow3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000442:	2301      	movs	r3, #1
 8000444:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	gpio_padRow3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 8000448:	2303      	movs	r3, #3
 800044a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	gpio_padRow3.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 800044e:	2300      	movs	r3, #0
 8000450:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	gpio_padRow3.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 8000454:	2300      	movs	r3, #0
 8000456:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	GPIO_Handle_t gpio_padCol0;
	gpio_padCol0.pGPIOx = GPIOE;
 800045a:	4b32      	ldr	r3, [pc, #200]	; (8000524 <Keypad_PORTS_Init+0x158>)
 800045c:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_padCol0.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_11;
 800045e:	230b      	movs	r3, #11
 8000460:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	gpio_padCol0.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000464:	2300      	movs	r3, #0
 8000466:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	gpio_padCol0.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 800046a:	2303      	movs	r3, #3
 800046c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	gpio_padCol0.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 8000470:	2300      	movs	r3, #0
 8000472:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	gpio_padCol0.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_PIN_PU;
 8000476:	2301      	movs	r3, #1
 8000478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	GPIO_Handle_t gpio_padCol1;
	gpio_padCol1.pGPIOx = GPIOE;
 800047c:	4b29      	ldr	r3, [pc, #164]	; (8000524 <Keypad_PORTS_Init+0x158>)
 800047e:	61bb      	str	r3, [r7, #24]
	gpio_padCol1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_12;
 8000480:	230c      	movs	r3, #12
 8000482:	773b      	strb	r3, [r7, #28]
	gpio_padCol1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000484:	2300      	movs	r3, #0
 8000486:	777b      	strb	r3, [r7, #29]
	gpio_padCol1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 8000488:	2303      	movs	r3, #3
 800048a:	77bb      	strb	r3, [r7, #30]
	gpio_padCol1.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 800048c:	2300      	movs	r3, #0
 800048e:	f887 3020 	strb.w	r3, [r7, #32]
	gpio_padCol1.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_PIN_PU;
 8000492:	2301      	movs	r3, #1
 8000494:	77fb      	strb	r3, [r7, #31]

	GPIO_Handle_t gpio_padCol2;
	gpio_padCol2.pGPIOx = GPIOE;
 8000496:	4b23      	ldr	r3, [pc, #140]	; (8000524 <Keypad_PORTS_Init+0x158>)
 8000498:	60fb      	str	r3, [r7, #12]
	gpio_padCol2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 800049a:	230d      	movs	r3, #13
 800049c:	743b      	strb	r3, [r7, #16]
	gpio_padCol2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800049e:	2300      	movs	r3, #0
 80004a0:	747b      	strb	r3, [r7, #17]
	gpio_padCol2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 80004a2:	2303      	movs	r3, #3
 80004a4:	74bb      	strb	r3, [r7, #18]
	gpio_padCol2.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 80004a6:	2300      	movs	r3, #0
 80004a8:	753b      	strb	r3, [r7, #20]
	gpio_padCol2.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_PIN_PU;
 80004aa:	2301      	movs	r3, #1
 80004ac:	74fb      	strb	r3, [r7, #19]

	GPIO_Handle_t gpio_padCol3;
	gpio_padCol3.pGPIOx = GPIOE;
 80004ae:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <Keypad_PORTS_Init+0x158>)
 80004b0:	603b      	str	r3, [r7, #0]
	gpio_padCol3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_14;
 80004b2:	230e      	movs	r3, #14
 80004b4:	713b      	strb	r3, [r7, #4]
	gpio_padCol3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80004b6:	2300      	movs	r3, #0
 80004b8:	717b      	strb	r3, [r7, #5]
	gpio_padCol3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 80004ba:	2303      	movs	r3, #3
 80004bc:	71bb      	strb	r3, [r7, #6]
	gpio_padCol3.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 80004be:	2300      	movs	r3, #0
 80004c0:	723b      	strb	r3, [r7, #8]
	gpio_padCol3.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_PIN_PU;
 80004c2:	2301      	movs	r3, #1
 80004c4:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOE, ENABLE);
 80004c6:	2101      	movs	r1, #1
 80004c8:	4816      	ldr	r0, [pc, #88]	; (8000524 <Keypad_PORTS_Init+0x158>)
 80004ca:	f000 fc91 	bl	8000df0 <GPIO_PeriClockControl>

	GPIO_Init(&gpio_padRow0);
 80004ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fbb9 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&gpio_padRow1);
 80004d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 fbb4 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&gpio_padRow2);
 80004e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 fbaf 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&gpio_padRow3);
 80004ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 fbaa 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&gpio_padCol0);
 80004f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fba5 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&gpio_padCol1);
 8000500:	f107 0318 	add.w	r3, r7, #24
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fba0 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&gpio_padCol2);
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fb9b 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&gpio_padCol3);
 8000514:	463b      	mov	r3, r7
 8000516:	4618      	mov	r0, r3
 8000518:	f000 fb97 	bl	8000c4a <GPIO_Init>
}
 800051c:	bf00      	nop
 800051e:	3760      	adds	r7, #96	; 0x60
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000

08000528 <Keypad_Scan>:


uint8_t Keypad_Scan(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
	unsigned char key;

	// check row 0 of keypad by setting it to LOW
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_7, DISABLE);
 800052e:	2200      	movs	r2, #0
 8000530:	2107      	movs	r1, #7
 8000532:	4873      	ldr	r0, [pc, #460]	; (8000700 <Keypad_Scan+0x1d8>)
 8000534:	f000 fd8a 	bl	800104c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_8, ENABLE);
 8000538:	2201      	movs	r2, #1
 800053a:	2108      	movs	r1, #8
 800053c:	4870      	ldr	r0, [pc, #448]	; (8000700 <Keypad_Scan+0x1d8>)
 800053e:	f000 fd85 	bl	800104c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_9, ENABLE);
 8000542:	2201      	movs	r2, #1
 8000544:	2109      	movs	r1, #9
 8000546:	486e      	ldr	r0, [pc, #440]	; (8000700 <Keypad_Scan+0x1d8>)
 8000548:	f000 fd80 	bl	800104c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_10, ENABLE);
 800054c:	2201      	movs	r2, #1
 800054e:	210a      	movs	r1, #10
 8000550:	486b      	ldr	r0, [pc, #428]	; (8000700 <Keypad_Scan+0x1d8>)
 8000552:	f000 fd7b 	bl	800104c <GPIO_WriteToOutputPin>
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_11) == DISABLE) {key = '1';}
 8000556:	210b      	movs	r1, #11
 8000558:	4869      	ldr	r0, [pc, #420]	; (8000700 <Keypad_Scan+0x1d8>)
 800055a:	f000 fd61 	bl	8001020 <GPIO_ReadFromInputPin>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d101      	bne.n	8000568 <Keypad_Scan+0x40>
 8000564:	2331      	movs	r3, #49	; 0x31
 8000566:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_12) == DISABLE) {key = '2';}
 8000568:	210c      	movs	r1, #12
 800056a:	4865      	ldr	r0, [pc, #404]	; (8000700 <Keypad_Scan+0x1d8>)
 800056c:	f000 fd58 	bl	8001020 <GPIO_ReadFromInputPin>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d101      	bne.n	800057a <Keypad_Scan+0x52>
 8000576:	2332      	movs	r3, #50	; 0x32
 8000578:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_13) == DISABLE) {key = '3';}
 800057a:	210d      	movs	r1, #13
 800057c:	4860      	ldr	r0, [pc, #384]	; (8000700 <Keypad_Scan+0x1d8>)
 800057e:	f000 fd4f 	bl	8001020 <GPIO_ReadFromInputPin>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d101      	bne.n	800058c <Keypad_Scan+0x64>
 8000588:	2333      	movs	r3, #51	; 0x33
 800058a:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_14) == DISABLE) {key = 'A';}
 800058c:	210e      	movs	r1, #14
 800058e:	485c      	ldr	r0, [pc, #368]	; (8000700 <Keypad_Scan+0x1d8>)
 8000590:	f000 fd46 	bl	8001020 <GPIO_ReadFromInputPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d101      	bne.n	800059e <Keypad_Scan+0x76>
 800059a:	2341      	movs	r3, #65	; 0x41
 800059c:	71fb      	strb	r3, [r7, #7]

	// check row 1 of keypad by setting it to LOW
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_7, ENABLE);
 800059e:	2201      	movs	r2, #1
 80005a0:	2107      	movs	r1, #7
 80005a2:	4857      	ldr	r0, [pc, #348]	; (8000700 <Keypad_Scan+0x1d8>)
 80005a4:	f000 fd52 	bl	800104c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_8, DISABLE);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2108      	movs	r1, #8
 80005ac:	4854      	ldr	r0, [pc, #336]	; (8000700 <Keypad_Scan+0x1d8>)
 80005ae:	f000 fd4d 	bl	800104c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_9, ENABLE);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2109      	movs	r1, #9
 80005b6:	4852      	ldr	r0, [pc, #328]	; (8000700 <Keypad_Scan+0x1d8>)
 80005b8:	f000 fd48 	bl	800104c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_10, ENABLE);
 80005bc:	2201      	movs	r2, #1
 80005be:	210a      	movs	r1, #10
 80005c0:	484f      	ldr	r0, [pc, #316]	; (8000700 <Keypad_Scan+0x1d8>)
 80005c2:	f000 fd43 	bl	800104c <GPIO_WriteToOutputPin>
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_11) == DISABLE) {key = '4';}
 80005c6:	210b      	movs	r1, #11
 80005c8:	484d      	ldr	r0, [pc, #308]	; (8000700 <Keypad_Scan+0x1d8>)
 80005ca:	f000 fd29 	bl	8001020 <GPIO_ReadFromInputPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d101      	bne.n	80005d8 <Keypad_Scan+0xb0>
 80005d4:	2334      	movs	r3, #52	; 0x34
 80005d6:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_12) == DISABLE) {key = '5';}
 80005d8:	210c      	movs	r1, #12
 80005da:	4849      	ldr	r0, [pc, #292]	; (8000700 <Keypad_Scan+0x1d8>)
 80005dc:	f000 fd20 	bl	8001020 <GPIO_ReadFromInputPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d101      	bne.n	80005ea <Keypad_Scan+0xc2>
 80005e6:	2335      	movs	r3, #53	; 0x35
 80005e8:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_13) == DISABLE) {key = '6';}
 80005ea:	210d      	movs	r1, #13
 80005ec:	4844      	ldr	r0, [pc, #272]	; (8000700 <Keypad_Scan+0x1d8>)
 80005ee:	f000 fd17 	bl	8001020 <GPIO_ReadFromInputPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d101      	bne.n	80005fc <Keypad_Scan+0xd4>
 80005f8:	2336      	movs	r3, #54	; 0x36
 80005fa:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_14) == DISABLE) {key = 'B';}
 80005fc:	210e      	movs	r1, #14
 80005fe:	4840      	ldr	r0, [pc, #256]	; (8000700 <Keypad_Scan+0x1d8>)
 8000600:	f000 fd0e 	bl	8001020 <GPIO_ReadFromInputPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <Keypad_Scan+0xe6>
 800060a:	2342      	movs	r3, #66	; 0x42
 800060c:	71fb      	strb	r3, [r7, #7]

	// check row 2 of keypad by setting it to LOW
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_7, ENABLE);
 800060e:	2201      	movs	r2, #1
 8000610:	2107      	movs	r1, #7
 8000612:	483b      	ldr	r0, [pc, #236]	; (8000700 <Keypad_Scan+0x1d8>)
 8000614:	f000 fd1a 	bl	800104c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_8, ENABLE);
 8000618:	2201      	movs	r2, #1
 800061a:	2108      	movs	r1, #8
 800061c:	4838      	ldr	r0, [pc, #224]	; (8000700 <Keypad_Scan+0x1d8>)
 800061e:	f000 fd15 	bl	800104c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_9, DISABLE);
 8000622:	2200      	movs	r2, #0
 8000624:	2109      	movs	r1, #9
 8000626:	4836      	ldr	r0, [pc, #216]	; (8000700 <Keypad_Scan+0x1d8>)
 8000628:	f000 fd10 	bl	800104c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_10, ENABLE);
 800062c:	2201      	movs	r2, #1
 800062e:	210a      	movs	r1, #10
 8000630:	4833      	ldr	r0, [pc, #204]	; (8000700 <Keypad_Scan+0x1d8>)
 8000632:	f000 fd0b 	bl	800104c <GPIO_WriteToOutputPin>
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_11) == DISABLE) {key = '7';}
 8000636:	210b      	movs	r1, #11
 8000638:	4831      	ldr	r0, [pc, #196]	; (8000700 <Keypad_Scan+0x1d8>)
 800063a:	f000 fcf1 	bl	8001020 <GPIO_ReadFromInputPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d101      	bne.n	8000648 <Keypad_Scan+0x120>
 8000644:	2337      	movs	r3, #55	; 0x37
 8000646:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_12) == DISABLE) {key = '8';}
 8000648:	210c      	movs	r1, #12
 800064a:	482d      	ldr	r0, [pc, #180]	; (8000700 <Keypad_Scan+0x1d8>)
 800064c:	f000 fce8 	bl	8001020 <GPIO_ReadFromInputPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d101      	bne.n	800065a <Keypad_Scan+0x132>
 8000656:	2338      	movs	r3, #56	; 0x38
 8000658:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_13) == DISABLE) {key = '9';}
 800065a:	210d      	movs	r1, #13
 800065c:	4828      	ldr	r0, [pc, #160]	; (8000700 <Keypad_Scan+0x1d8>)
 800065e:	f000 fcdf 	bl	8001020 <GPIO_ReadFromInputPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d101      	bne.n	800066c <Keypad_Scan+0x144>
 8000668:	2339      	movs	r3, #57	; 0x39
 800066a:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_14) == DISABLE) {key = 'C';}
 800066c:	210e      	movs	r1, #14
 800066e:	4824      	ldr	r0, [pc, #144]	; (8000700 <Keypad_Scan+0x1d8>)
 8000670:	f000 fcd6 	bl	8001020 <GPIO_ReadFromInputPin>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d101      	bne.n	800067e <Keypad_Scan+0x156>
 800067a:	2343      	movs	r3, #67	; 0x43
 800067c:	71fb      	strb	r3, [r7, #7]

	// check row 3 of keypad by setting it to LOW
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_7, ENABLE);
 800067e:	2201      	movs	r2, #1
 8000680:	2107      	movs	r1, #7
 8000682:	481f      	ldr	r0, [pc, #124]	; (8000700 <Keypad_Scan+0x1d8>)
 8000684:	f000 fce2 	bl	800104c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_8, ENABLE);
 8000688:	2201      	movs	r2, #1
 800068a:	2108      	movs	r1, #8
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <Keypad_Scan+0x1d8>)
 800068e:	f000 fcdd 	bl	800104c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_9, ENABLE);
 8000692:	2201      	movs	r2, #1
 8000694:	2109      	movs	r1, #9
 8000696:	481a      	ldr	r0, [pc, #104]	; (8000700 <Keypad_Scan+0x1d8>)
 8000698:	f000 fcd8 	bl	800104c <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOE, GPIO_PIN_NUM_10, DISABLE);
 800069c:	2200      	movs	r2, #0
 800069e:	210a      	movs	r1, #10
 80006a0:	4817      	ldr	r0, [pc, #92]	; (8000700 <Keypad_Scan+0x1d8>)
 80006a2:	f000 fcd3 	bl	800104c <GPIO_WriteToOutputPin>
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_11) == DISABLE) {key = '*';}
 80006a6:	210b      	movs	r1, #11
 80006a8:	4815      	ldr	r0, [pc, #84]	; (8000700 <Keypad_Scan+0x1d8>)
 80006aa:	f000 fcb9 	bl	8001020 <GPIO_ReadFromInputPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d101      	bne.n	80006b8 <Keypad_Scan+0x190>
 80006b4:	232a      	movs	r3, #42	; 0x2a
 80006b6:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_12) == DISABLE) {key = '0';}
 80006b8:	210c      	movs	r1, #12
 80006ba:	4811      	ldr	r0, [pc, #68]	; (8000700 <Keypad_Scan+0x1d8>)
 80006bc:	f000 fcb0 	bl	8001020 <GPIO_ReadFromInputPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <Keypad_Scan+0x1a2>
 80006c6:	2330      	movs	r3, #48	; 0x30
 80006c8:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_13) == DISABLE) {key = '#';}
 80006ca:	210d      	movs	r1, #13
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <Keypad_Scan+0x1d8>)
 80006ce:	f000 fca7 	bl	8001020 <GPIO_ReadFromInputPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d101      	bne.n	80006dc <Keypad_Scan+0x1b4>
 80006d8:	2323      	movs	r3, #35	; 0x23
 80006da:	71fb      	strb	r3, [r7, #7]
	if(GPIO_ReadFromInputPin(GPIOE, GPIO_PIN_NUM_14) == DISABLE) {key = 'D';}
 80006dc:	210e      	movs	r1, #14
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <Keypad_Scan+0x1d8>)
 80006e0:	f000 fc9e 	bl	8001020 <GPIO_ReadFromInputPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <Keypad_Scan+0x1c6>
 80006ea:	2344      	movs	r3, #68	; 0x44
 80006ec:	71fb      	strb	r3, [r7, #7]

	Keypad_Delay(10);
 80006ee:	200a      	movs	r0, #10
 80006f0:	f000 f808 	bl	8000704 <Keypad_Delay>

	return key;
 80006f4:	79fb      	ldrb	r3, [r7, #7]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <Keypad_Delay>:


void Keypad_Delay(uint32_t num)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	// Delay in ms
	for(; num > 0; num--)
 800070c:	e00d      	b.n	800072a <Keypad_Delay+0x26>
	{
		for(uint32_t i = 0; i < 3195; i++);
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e002      	b.n	800071a <Keypad_Delay+0x16>
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	3301      	adds	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000720:	4293      	cmp	r3, r2
 8000722:	d9f7      	bls.n	8000714 <Keypad_Delay+0x10>
	for(; num > 0; num--)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1ee      	bne.n	800070e <Keypad_Delay+0xa>
	}
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <LCD_Init>:
 */

#include "lcd_driver.h"

void LCD_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	// Enable ports (@PORTS_Init())
	LCD_PORTS_Init();
 8000744:	f000 f82a 	bl	800079c <LCD_PORTS_Init>

	// Initialization sequence and modes
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NUM_1, DISABLE);
 8000748:	2200      	movs	r2, #0
 800074a:	2101      	movs	r1, #1
 800074c:	4812      	ldr	r0, [pc, #72]	; (8000798 <LCD_Init+0x58>)
 800074e:	f000 fc7d 	bl	800104c <GPIO_WriteToOutputPin>

	// LCD init commands (0x--)
	LCD_Command(0x30); // Initialization
 8000752:	2030      	movs	r0, #48	; 0x30
 8000754:	f000 f91c 	bl	8000990 <LCD_Command>
	LCD_Command(0x38); // Mode: 8-bit data
 8000758:	2038      	movs	r0, #56	; 0x38
 800075a:	f000 f919 	bl	8000990 <LCD_Command>
	LCD_Command(0x01); // Clear Display
 800075e:	2001      	movs	r0, #1
 8000760:	f000 f916 	bl	8000990 <LCD_Command>
	LCD_Command(0x02); // Cursor is at Home Position
 8000764:	2002      	movs	r0, #2
 8000766:	f000 f913 	bl	8000990 <LCD_Command>
	LCD_Command(0x0F); // Display on, cursor blinking
 800076a:	200f      	movs	r0, #15
 800076c:	f000 f910 	bl	8000990 <LCD_Command>

	LCD_Data('A');
 8000770:	2041      	movs	r0, #65	; 0x41
 8000772:	f000 f9a1 	bl	8000ab8 <LCD_Data>
	LCD_Data('B');
 8000776:	2042      	movs	r0, #66	; 0x42
 8000778:	f000 f99e 	bl	8000ab8 <LCD_Data>
	LCD_Data('C');
 800077c:	2043      	movs	r0, #67	; 0x43
 800077e:	f000 f99b 	bl	8000ab8 <LCD_Data>
	LCD_Data('1');
 8000782:	2031      	movs	r0, #49	; 0x31
 8000784:	f000 f998 	bl	8000ab8 <LCD_Data>
	LCD_Data('2');
 8000788:	2032      	movs	r0, #50	; 0x32
 800078a:	f000 f995 	bl	8000ab8 <LCD_Data>
	LCD_Data('3');
 800078e:	2033      	movs	r0, #51	; 0x33
 8000790:	f000 f992 	bl	8000ab8 <LCD_Data>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40020800 	.word	0x40020800

0800079c <LCD_PORTS_Init>:


void LCD_PORTS_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a2      	sub	sp, #136	; 0x88
 80007a0:	af00      	add	r7, sp, #0
	// Enable RCC clocks for GPIO registers
	GPIO_PeriClockControl(GPIOC, ENABLE);
 80007a2:	2101      	movs	r1, #1
 80007a4:	4878      	ldr	r0, [pc, #480]	; (8000988 <LCD_PORTS_Init+0x1ec>)
 80007a6:	f000 fb23 	bl	8000df0 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOD, ENABLE);
 80007aa:	2101      	movs	r1, #1
 80007ac:	4877      	ldr	r0, [pc, #476]	; (800098c <LCD_PORTS_Init+0x1f0>)
 80007ae:	f000 fb1f 	bl	8000df0 <GPIO_PeriClockControl>

	// Set GPIO configuration registers
	GPIO_Handle_t GPIO_RS;
	GPIO_RS.pGPIOx = GPIOC;
 80007b2:	4b75      	ldr	r3, [pc, #468]	; (8000988 <LCD_PORTS_Init+0x1ec>)
 80007b4:	67fb      	str	r3, [r7, #124]	; 0x7c
	GPIO_RS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	GPIO_RS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80007bc:	2301      	movs	r3, #1
 80007be:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	GPIO_RS.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
	GPIO_RS.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	GPIO_RS.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

	GPIO_Handle_t GPIO_RW;
	GPIO_RW.pGPIOx = GPIOC;
 80007d4:	4b6c      	ldr	r3, [pc, #432]	; (8000988 <LCD_PORTS_Init+0x1ec>)
 80007d6:	673b      	str	r3, [r7, #112]	; 0x70
	GPIO_RW.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_1;
 80007d8:	2301      	movs	r3, #1
 80007da:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	GPIO_RW.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80007de:	2301      	movs	r3, #1
 80007e0:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	GPIO_RW.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	GPIO_RW.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	GPIO_RW.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	GPIO_Handle_t GPIO_E;
	GPIO_E.pGPIOx = GPIOC;
 80007f6:	4b64      	ldr	r3, [pc, #400]	; (8000988 <LCD_PORTS_Init+0x1ec>)
 80007f8:	667b      	str	r3, [r7, #100]	; 0x64
	GPIO_E.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	GPIO_E.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000800:	2301      	movs	r3, #1
 8000802:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	GPIO_E.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	GPIO_E.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 800080c:	2300      	movs	r3, #0
 800080e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	GPIO_E.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 8000812:	2300      	movs	r3, #0
 8000814:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	GPIO_Handle_t GPIO_D0;
	GPIO_D0.pGPIOx = GPIOD;
 8000818:	4b5c      	ldr	r3, [pc, #368]	; (800098c <LCD_PORTS_Init+0x1f0>)
 800081a:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_D0.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_0;
 800081c:	2300      	movs	r3, #0
 800081e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	GPIO_D0.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000822:	2301      	movs	r3, #1
 8000824:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	GPIO_D0.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	GPIO_D0.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 800082e:	2300      	movs	r3, #0
 8000830:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	GPIO_D0.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 8000834:	2300      	movs	r3, #0
 8000836:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	GPIO_Handle_t GPIO_D1;
	GPIO_D1.pGPIOx = GPIOD;
 800083a:	4b54      	ldr	r3, [pc, #336]	; (800098c <LCD_PORTS_Init+0x1f0>)
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_D1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_1;
 800083e:	2301      	movs	r3, #1
 8000840:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	GPIO_D1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000844:	2301      	movs	r3, #1
 8000846:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	GPIO_D1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	GPIO_D1.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 8000850:	2300      	movs	r3, #0
 8000852:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GPIO_D1.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 8000856:	2300      	movs	r3, #0
 8000858:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	GPIO_Handle_t GPIO_D2;
	GPIO_D2.pGPIOx = GPIOD;
 800085c:	4b4b      	ldr	r3, [pc, #300]	; (800098c <LCD_PORTS_Init+0x1f0>)
 800085e:	643b      	str	r3, [r7, #64]	; 0x40
	GPIO_D2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_2;
 8000860:	2302      	movs	r3, #2
 8000862:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	GPIO_D2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000866:	2301      	movs	r3, #1
 8000868:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	GPIO_D2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	GPIO_D2.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 8000872:	2300      	movs	r3, #0
 8000874:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	GPIO_D2.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 8000878:	2300      	movs	r3, #0
 800087a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	GPIO_Handle_t GPIO_D3;
	GPIO_D3.pGPIOx = GPIOD;
 800087e:	4b43      	ldr	r3, [pc, #268]	; (800098c <LCD_PORTS_Init+0x1f0>)
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_D3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_3;
 8000882:	2303      	movs	r3, #3
 8000884:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	GPIO_D3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000888:	2301      	movs	r3, #1
 800088a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	GPIO_D3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	GPIO_D3.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 8000894:	2300      	movs	r3, #0
 8000896:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	GPIO_D3.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 800089a:	2300      	movs	r3, #0
 800089c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	GPIO_Handle_t GPIO_D4;
	GPIO_D4.pGPIOx = GPIOD;
 80008a0:	4b3a      	ldr	r3, [pc, #232]	; (800098c <LCD_PORTS_Init+0x1f0>)
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_D4.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_D4.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80008aa:	2301      	movs	r3, #1
 80008ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GPIO_D4.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	GPIO_D4.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GPIO_D4.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	GPIO_Handle_t GPIO_D5;
	GPIO_D5.pGPIOx = GPIOD;
 80008c2:	4b32      	ldr	r3, [pc, #200]	; (800098c <LCD_PORTS_Init+0x1f0>)
 80008c4:	61fb      	str	r3, [r7, #28]
	GPIO_D5.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_5;
 80008c6:	2305      	movs	r3, #5
 80008c8:	f887 3020 	strb.w	r3, [r7, #32]
	GPIO_D5.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	GPIO_D5.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	GPIO_D5.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 80008d8:	2300      	movs	r3, #0
 80008da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_D5.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 80008de:	2300      	movs	r3, #0
 80008e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	GPIO_Handle_t GPIO_D6;
	GPIO_D6.pGPIOx = GPIOD;
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <LCD_PORTS_Init+0x1f0>)
 80008e6:	613b      	str	r3, [r7, #16]
	GPIO_D6.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_6;
 80008e8:	2306      	movs	r3, #6
 80008ea:	753b      	strb	r3, [r7, #20]
	GPIO_D6.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80008ec:	2301      	movs	r3, #1
 80008ee:	757b      	strb	r3, [r7, #21]
	GPIO_D6.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 80008f0:	2303      	movs	r3, #3
 80008f2:	75bb      	strb	r3, [r7, #22]
	GPIO_D6.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 80008f4:	2300      	movs	r3, #0
 80008f6:	763b      	strb	r3, [r7, #24]
	GPIO_D6.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 80008f8:	2300      	movs	r3, #0
 80008fa:	75fb      	strb	r3, [r7, #23]

	GPIO_Handle_t GPIO_D7;
	GPIO_D7.pGPIOx = GPIOD;
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <LCD_PORTS_Init+0x1f0>)
 80008fe:	607b      	str	r3, [r7, #4]
	GPIO_D7.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_7;
 8000900:	2307      	movs	r3, #7
 8000902:	723b      	strb	r3, [r7, #8]
	GPIO_D7.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000904:	2301      	movs	r3, #1
 8000906:	727b      	strb	r3, [r7, #9]
	GPIO_D7.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	72bb      	strb	r3, [r7, #10]
	GPIO_D7.GPIO_PinConfig.GPIO_PinOType = GPIO_OUTTYPE_PP;
 800090c:	2300      	movs	r3, #0
 800090e:	733b      	strb	r3, [r7, #12]
	GPIO_D7.GPIO_PinConfig.GPIO_PinPUPDControl = GPIO_NO_PUPD;
 8000910:	2300      	movs	r3, #0
 8000912:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIO_RS);
 8000914:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f996 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&GPIO_RW);
 800091e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f991 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&GPIO_E);
 8000928:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f98c 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&GPIO_D0);
 8000932:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f987 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&GPIO_D1);
 800093c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f982 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&GPIO_D2);
 8000946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f97d 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&GPIO_D3);
 8000950:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f978 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&GPIO_D4);
 800095a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f973 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&GPIO_D5);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4618      	mov	r0, r3
 800096a:	f000 f96e 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&GPIO_D6);
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f969 	bl	8000c4a <GPIO_Init>
	GPIO_Init(&GPIO_D7);
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f965 	bl	8000c4a <GPIO_Init>
}
 8000980:	bf00      	nop
 8000982:	3788      	adds	r7, #136	; 0x88
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40020800 	.word	0x40020800
 800098c:	40020c00 	.word	0x40020c00

08000990 <LCD_Command>:


void LCD_Command(uint8_t command)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	// Set RS to LOW
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NUM_0, DISABLE);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	4844      	ldr	r0, [pc, #272]	; (8000ab0 <LCD_Command+0x120>)
 80009a0:	f000 fb54 	bl	800104c <GPIO_WriteToOutputPin>

	// Put command on GPIO pins (D0 - D7)
	if(((uint8_t)command & LCD_PD7_MASK) == LCD_PD7_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_7, ENABLE);}
 80009a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	da05      	bge.n	80009b8 <LCD_Command+0x28>
 80009ac:	2201      	movs	r2, #1
 80009ae:	2107      	movs	r1, #7
 80009b0:	4840      	ldr	r0, [pc, #256]	; (8000ab4 <LCD_Command+0x124>)
 80009b2:	f000 fb4b 	bl	800104c <GPIO_WriteToOutputPin>
 80009b6:	e004      	b.n	80009c2 <LCD_Command+0x32>
	else                                                  {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_7, DISABLE);}
 80009b8:	2200      	movs	r2, #0
 80009ba:	2107      	movs	r1, #7
 80009bc:	483d      	ldr	r0, [pc, #244]	; (8000ab4 <LCD_Command+0x124>)
 80009be:	f000 fb45 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)command & LCD_PD6_MASK) == LCD_PD6_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_6, ENABLE);}
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d005      	beq.n	80009d8 <LCD_Command+0x48>
 80009cc:	2201      	movs	r2, #1
 80009ce:	2106      	movs	r1, #6
 80009d0:	4838      	ldr	r0, [pc, #224]	; (8000ab4 <LCD_Command+0x124>)
 80009d2:	f000 fb3b 	bl	800104c <GPIO_WriteToOutputPin>
 80009d6:	e004      	b.n	80009e2 <LCD_Command+0x52>
	else                                                  {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_6, DISABLE);}
 80009d8:	2200      	movs	r2, #0
 80009da:	2106      	movs	r1, #6
 80009dc:	4835      	ldr	r0, [pc, #212]	; (8000ab4 <LCD_Command+0x124>)
 80009de:	f000 fb35 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)command & LCD_PD5_MASK) == LCD_PD5_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_5, ENABLE);}
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f003 0320 	and.w	r3, r3, #32
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d005      	beq.n	80009f8 <LCD_Command+0x68>
 80009ec:	2201      	movs	r2, #1
 80009ee:	2105      	movs	r1, #5
 80009f0:	4830      	ldr	r0, [pc, #192]	; (8000ab4 <LCD_Command+0x124>)
 80009f2:	f000 fb2b 	bl	800104c <GPIO_WriteToOutputPin>
 80009f6:	e004      	b.n	8000a02 <LCD_Command+0x72>
	else                                                  {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_5, DISABLE);}
 80009f8:	2200      	movs	r2, #0
 80009fa:	2105      	movs	r1, #5
 80009fc:	482d      	ldr	r0, [pc, #180]	; (8000ab4 <LCD_Command+0x124>)
 80009fe:	f000 fb25 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)command & LCD_PD4_MASK) == LCD_PD4_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_4, ENABLE);}
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d005      	beq.n	8000a18 <LCD_Command+0x88>
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2104      	movs	r1, #4
 8000a10:	4828      	ldr	r0, [pc, #160]	; (8000ab4 <LCD_Command+0x124>)
 8000a12:	f000 fb1b 	bl	800104c <GPIO_WriteToOutputPin>
 8000a16:	e004      	b.n	8000a22 <LCD_Command+0x92>
	else                                                  {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_4, DISABLE);}
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	4825      	ldr	r0, [pc, #148]	; (8000ab4 <LCD_Command+0x124>)
 8000a1e:	f000 fb15 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)command & LCD_PD3_MASK) == LCD_PD3_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_3, ENABLE);}
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d005      	beq.n	8000a38 <LCD_Command+0xa8>
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2103      	movs	r1, #3
 8000a30:	4820      	ldr	r0, [pc, #128]	; (8000ab4 <LCD_Command+0x124>)
 8000a32:	f000 fb0b 	bl	800104c <GPIO_WriteToOutputPin>
 8000a36:	e004      	b.n	8000a42 <LCD_Command+0xb2>
	else                                                  {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_3, DISABLE);}
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	481d      	ldr	r0, [pc, #116]	; (8000ab4 <LCD_Command+0x124>)
 8000a3e:	f000 fb05 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)command & LCD_PD2_MASK) == LCD_PD2_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_2, ENABLE);}
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d005      	beq.n	8000a58 <LCD_Command+0xc8>
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4818      	ldr	r0, [pc, #96]	; (8000ab4 <LCD_Command+0x124>)
 8000a52:	f000 fafb 	bl	800104c <GPIO_WriteToOutputPin>
 8000a56:	e004      	b.n	8000a62 <LCD_Command+0xd2>
	else                                                  {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_2, DISABLE);}
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	4815      	ldr	r0, [pc, #84]	; (8000ab4 <LCD_Command+0x124>)
 8000a5e:	f000 faf5 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)command & LCD_PD1_MASK) == LCD_PD1_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_1, ENABLE);}
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d005      	beq.n	8000a78 <LCD_Command+0xe8>
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <LCD_Command+0x124>)
 8000a72:	f000 faeb 	bl	800104c <GPIO_WriteToOutputPin>
 8000a76:	e004      	b.n	8000a82 <LCD_Command+0xf2>
	else                                                  {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_1, DISABLE);}
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <LCD_Command+0x124>)
 8000a7e:	f000 fae5 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)command & LCD_PD0_MASK) == LCD_PD0_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_0, ENABLE);}
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d005      	beq.n	8000a98 <LCD_Command+0x108>
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <LCD_Command+0x124>)
 8000a92:	f000 fadb 	bl	800104c <GPIO_WriteToOutputPin>
 8000a96:	e004      	b.n	8000aa2 <LCD_Command+0x112>
	else                                                  {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_0, DISABLE);}
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <LCD_Command+0x124>)
 8000a9e:	f000 fad5 	bl	800104c <GPIO_WriteToOutputPin>
	LCD_Enable();
 8000aa2:	f000 f89f 	bl	8000be4 <LCD_Enable>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40020c00 	.word	0x40020c00

08000ab8 <LCD_Data>:


void LCD_Data(unsigned char data)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	// Set RS to HIGH
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NUM_0, ENABLE);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4845      	ldr	r0, [pc, #276]	; (8000bdc <LCD_Data+0x124>)
 8000ac8:	f000 fac0 	bl	800104c <GPIO_WriteToOutputPin>

	// Put data on GPIO pins (D0 - D7)
	if(((uint8_t)data & LCD_PD7_MASK) == LCD_PD7_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_7, ENABLE);}
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	da05      	bge.n	8000ae0 <LCD_Data+0x28>
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2107      	movs	r1, #7
 8000ad8:	4841      	ldr	r0, [pc, #260]	; (8000be0 <LCD_Data+0x128>)
 8000ada:	f000 fab7 	bl	800104c <GPIO_WriteToOutputPin>
 8000ade:	e004      	b.n	8000aea <LCD_Data+0x32>
	else                                               {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_7, DISABLE);}
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2107      	movs	r1, #7
 8000ae4:	483e      	ldr	r0, [pc, #248]	; (8000be0 <LCD_Data+0x128>)
 8000ae6:	f000 fab1 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)data & LCD_PD6_MASK) == LCD_PD6_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_6, ENABLE);}
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d005      	beq.n	8000b00 <LCD_Data+0x48>
 8000af4:	2201      	movs	r2, #1
 8000af6:	2106      	movs	r1, #6
 8000af8:	4839      	ldr	r0, [pc, #228]	; (8000be0 <LCD_Data+0x128>)
 8000afa:	f000 faa7 	bl	800104c <GPIO_WriteToOutputPin>
 8000afe:	e004      	b.n	8000b0a <LCD_Data+0x52>
	else                                               {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_6, DISABLE);}
 8000b00:	2200      	movs	r2, #0
 8000b02:	2106      	movs	r1, #6
 8000b04:	4836      	ldr	r0, [pc, #216]	; (8000be0 <LCD_Data+0x128>)
 8000b06:	f000 faa1 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)data & LCD_PD5_MASK) == LCD_PD5_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_5, ENABLE);}
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 0320 	and.w	r3, r3, #32
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d005      	beq.n	8000b20 <LCD_Data+0x68>
 8000b14:	2201      	movs	r2, #1
 8000b16:	2105      	movs	r1, #5
 8000b18:	4831      	ldr	r0, [pc, #196]	; (8000be0 <LCD_Data+0x128>)
 8000b1a:	f000 fa97 	bl	800104c <GPIO_WriteToOutputPin>
 8000b1e:	e004      	b.n	8000b2a <LCD_Data+0x72>
	else                                               {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_5, DISABLE);}
 8000b20:	2200      	movs	r2, #0
 8000b22:	2105      	movs	r1, #5
 8000b24:	482e      	ldr	r0, [pc, #184]	; (8000be0 <LCD_Data+0x128>)
 8000b26:	f000 fa91 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)data & LCD_PD4_MASK) == LCD_PD4_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_4, ENABLE);}
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d005      	beq.n	8000b40 <LCD_Data+0x88>
 8000b34:	2201      	movs	r2, #1
 8000b36:	2104      	movs	r1, #4
 8000b38:	4829      	ldr	r0, [pc, #164]	; (8000be0 <LCD_Data+0x128>)
 8000b3a:	f000 fa87 	bl	800104c <GPIO_WriteToOutputPin>
 8000b3e:	e004      	b.n	8000b4a <LCD_Data+0x92>
	else                                               {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_4, DISABLE);}
 8000b40:	2200      	movs	r2, #0
 8000b42:	2104      	movs	r1, #4
 8000b44:	4826      	ldr	r0, [pc, #152]	; (8000be0 <LCD_Data+0x128>)
 8000b46:	f000 fa81 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)data & LCD_PD3_MASK) == LCD_PD3_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_3, ENABLE);}
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <LCD_Data+0xa8>
 8000b54:	2201      	movs	r2, #1
 8000b56:	2103      	movs	r1, #3
 8000b58:	4821      	ldr	r0, [pc, #132]	; (8000be0 <LCD_Data+0x128>)
 8000b5a:	f000 fa77 	bl	800104c <GPIO_WriteToOutputPin>
 8000b5e:	e004      	b.n	8000b6a <LCD_Data+0xb2>
	else                                               {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_3, DISABLE);}
 8000b60:	2200      	movs	r2, #0
 8000b62:	2103      	movs	r1, #3
 8000b64:	481e      	ldr	r0, [pc, #120]	; (8000be0 <LCD_Data+0x128>)
 8000b66:	f000 fa71 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)data & LCD_PD2_MASK) == LCD_PD2_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_2, ENABLE);}
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d005      	beq.n	8000b80 <LCD_Data+0xc8>
 8000b74:	2201      	movs	r2, #1
 8000b76:	2102      	movs	r1, #2
 8000b78:	4819      	ldr	r0, [pc, #100]	; (8000be0 <LCD_Data+0x128>)
 8000b7a:	f000 fa67 	bl	800104c <GPIO_WriteToOutputPin>
 8000b7e:	e004      	b.n	8000b8a <LCD_Data+0xd2>
	else                                               {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_2, DISABLE);}
 8000b80:	2200      	movs	r2, #0
 8000b82:	2102      	movs	r1, #2
 8000b84:	4816      	ldr	r0, [pc, #88]	; (8000be0 <LCD_Data+0x128>)
 8000b86:	f000 fa61 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)data & LCD_PD1_MASK) == LCD_PD1_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_1, ENABLE);}
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d005      	beq.n	8000ba0 <LCD_Data+0xe8>
 8000b94:	2201      	movs	r2, #1
 8000b96:	2101      	movs	r1, #1
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <LCD_Data+0x128>)
 8000b9a:	f000 fa57 	bl	800104c <GPIO_WriteToOutputPin>
 8000b9e:	e004      	b.n	8000baa <LCD_Data+0xf2>
	else                                               {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_1, DISABLE);}
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	480e      	ldr	r0, [pc, #56]	; (8000be0 <LCD_Data+0x128>)
 8000ba6:	f000 fa51 	bl	800104c <GPIO_WriteToOutputPin>

	if(((uint8_t)data & LCD_PD0_MASK) == LCD_PD0_MASK) {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_0, ENABLE);}
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d005      	beq.n	8000bc0 <LCD_Data+0x108>
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <LCD_Data+0x128>)
 8000bba:	f000 fa47 	bl	800104c <GPIO_WriteToOutputPin>
 8000bbe:	e004      	b.n	8000bca <LCD_Data+0x112>
	else                                               {GPIO_WriteToOutputPin(GPIOD, GPIO_PIN_NUM_0, DISABLE);}
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <LCD_Data+0x128>)
 8000bc6:	f000 fa41 	bl	800104c <GPIO_WriteToOutputPin>
	LCD_Enable();
 8000bca:	f000 f80b 	bl	8000be4 <LCD_Enable>
	LCD_Command(0x06); // Shift cursor to the right for the next character
 8000bce:	2006      	movs	r0, #6
 8000bd0:	f7ff fede 	bl	8000990 <LCD_Command>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020c00 	.word	0x40020c00

08000be4 <LCD_Enable>:


void LCD_Enable(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	// Set 'enable' pin to HIGH
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NUM_2, ENABLE);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2102      	movs	r1, #2
 8000bec:	4807      	ldr	r0, [pc, #28]	; (8000c0c <LCD_Enable+0x28>)
 8000bee:	f000 fa2d 	bl	800104c <GPIO_WriteToOutputPin>
	LCD_Delay(10); // Delay 10 ms
 8000bf2:	200a      	movs	r0, #10
 8000bf4:	f000 f80c 	bl	8000c10 <LCD_Delay>

	// Set 'enable' pin to LOW
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NUM_2, DISABLE);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <LCD_Enable+0x28>)
 8000bfe:	f000 fa25 	bl	800104c <GPIO_WriteToOutputPin>
	LCD_Delay(20); // Delay 20 ms
 8000c02:	2014      	movs	r0, #20
 8000c04:	f000 f804 	bl	8000c10 <LCD_Delay>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40020800 	.word	0x40020800

08000c10 <LCD_Delay>:


void LCD_Delay(uint32_t num)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	// Delay in ms
	for(; num > 0; num--)
 8000c18:	e00d      	b.n	8000c36 <LCD_Delay+0x26>
	{
		for(uint32_t i = 0; i < 3195; i++);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	e002      	b.n	8000c26 <LCD_Delay+0x16>
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3301      	adds	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d9f7      	bls.n	8000c20 <LCD_Delay+0x10>
	for(; num > 0; num--)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1ee      	bne.n	8000c1a <LCD_Delay+0xa>
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <GPIO_Init>:

#include "stm32f407xx_gpio_driver.h"

// Init Functions
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b085      	sub	sp, #20
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]

	// Configure the mode of the GPIO pin
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	795b      	ldrb	r3, [r3, #5]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d81f      	bhi.n	8000c9e <GPIO_Init+0x54>
	{
		// non-interrupt mode
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	795b      	ldrb	r3, [r3, #5]
 8000c62:	461a      	mov	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	791b      	ldrb	r3, [r3, #4]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	60fb      	str	r3, [r7, #12]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	791b      	ldrb	r3, [r3, #4]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	4619      	mov	r1, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	400a      	ands	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6819      	ldr	r1, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		// TO DO LATER (Interrupt Mode)
	}
	temp = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]

	// Configure the pin speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	799b      	ldrb	r3, [r3, #6]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	791b      	ldrb	r3, [r3, #4]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	791b      	ldrb	r3, [r3, #4]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2103      	movs	r1, #3
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	400a      	ands	r2, r1
 8000cd0:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6899      	ldr	r1, [r3, #8]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]

	// Configure the PUPD settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPUPDControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	79db      	ldrb	r3, [r3, #7]
 8000cea:	461a      	mov	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	791b      	ldrb	r3, [r3, #4]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	791b      	ldrb	r3, [r3, #4]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2103      	movs	r1, #3
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	400a      	ands	r2, r1
 8000d14:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68d9      	ldr	r1, [r3, #12]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	430a      	orrs	r2, r1
 8000d24:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]

	// Configure the output type
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOType << (1 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7a1b      	ldrb	r3, [r3, #8]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	791b      	ldrb	r3, [r3, #4]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	60fb      	str	r3, [r7, #12]
	pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << (1 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	791b      	ldrb	r3, [r3, #4]
 8000d44:	4619      	mov	r1, r3
 8000d46:	2301      	movs	r3, #1
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	400a      	ands	r2, r1
 8000d54:	605a      	str	r2, [r3, #4]
	pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6859      	ldr	r1, [r3, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	430a      	orrs	r2, r1
 8000d64:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]

	// Configure the alternate function registers
	if(pGPIOHandle ->  GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	795b      	ldrb	r3, [r3, #5]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d135      	bne.n	8000dde <GPIO_Init+0x194>
	{
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 8;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	791b      	ldrb	r3, [r3, #4]
 8000d76:	08db      	lsrs	r3, r3, #3
 8000d78:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle -> pGPIOx -> AFR[temp1] &= ~(0xF << (4 * temp2));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	7afb      	ldrb	r3, [r7, #11]
 8000d8a:	3308      	adds	r3, #8
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	7abb      	ldrb	r3, [r7, #10]
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	210f      	movs	r1, #15
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	4002      	ands	r2, r0
 8000da8:	3308      	adds	r3, #8
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	440b      	add	r3, r1
 8000dae:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> AFR[temp1] |= (pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp2));
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	7afb      	ldrb	r3, [r7, #11]
 8000db6:	3308      	adds	r3, #8
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7a5b      	ldrb	r3, [r3, #9]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	7abb      	ldrb	r3, [r7, #10]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6819      	ldr	r1, [r3, #0]
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	4302      	orrs	r2, r0
 8000dd6:	3308      	adds	r3, #8
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	440b      	add	r3, r1
 8000ddc:	605a      	str	r2, [r3, #4]
	}
	temp = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <GPIO_PeriClockControl>:
}


// Peripheral Clock Control
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t state)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d178      	bne.n	8000ef4 <GPIO_PeriClockControl+0x104>
	{
		if(pGPIOx == GPIOA)      {GPIOA_PERIPH_CLK_EN();}
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a7a      	ldr	r2, [pc, #488]	; (8000ff0 <GPIO_PeriClockControl+0x200>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d106      	bne.n	8000e18 <GPIO_PeriClockControl+0x28>
 8000e0a:	4b7a      	ldr	r3, [pc, #488]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a79      	ldr	r2, [pc, #484]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH) {GPIOH_PERIPH_CLK_DIS();}
		else if(pGPIOx == GPIOI) {GPIOI_PERIPH_CLK_DIS();}
		else if(pGPIOx == GPIOJ) {GPIOJ_PERIPH_CLK_DIS();}
		else if(pGPIOx == GPIOK) {GPIOK_PERIPH_CLK_DIS();}
	}
}
 8000e16:	e0e5      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOB) {GPIOB_PERIPH_CLK_EN();}
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a77      	ldr	r2, [pc, #476]	; (8000ff8 <GPIO_PeriClockControl+0x208>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d106      	bne.n	8000e2e <GPIO_PeriClockControl+0x3e>
 8000e20:	4b74      	ldr	r3, [pc, #464]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	4a73      	ldr	r2, [pc, #460]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e2c:	e0da      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOC) {GPIOC_PERIPH_CLK_EN();}
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a72      	ldr	r2, [pc, #456]	; (8000ffc <GPIO_PeriClockControl+0x20c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d106      	bne.n	8000e44 <GPIO_PeriClockControl+0x54>
 8000e36:	4b6f      	ldr	r3, [pc, #444]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a6e      	ldr	r2, [pc, #440]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e42:	e0cf      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOD) {GPIOD_PERIPH_CLK_EN();}
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a6e      	ldr	r2, [pc, #440]	; (8001000 <GPIO_PeriClockControl+0x210>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d106      	bne.n	8000e5a <GPIO_PeriClockControl+0x6a>
 8000e4c:	4b69      	ldr	r3, [pc, #420]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a68      	ldr	r2, [pc, #416]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e58:	e0c4      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOE) {GPIOE_PERIPH_CLK_EN();}
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a69      	ldr	r2, [pc, #420]	; (8001004 <GPIO_PeriClockControl+0x214>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d106      	bne.n	8000e70 <GPIO_PeriClockControl+0x80>
 8000e62:	4b64      	ldr	r3, [pc, #400]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a63      	ldr	r2, [pc, #396]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e6e:	e0b9      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOF) {GPIOF_PERIPH_CLK_EN();}
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a65      	ldr	r2, [pc, #404]	; (8001008 <GPIO_PeriClockControl+0x218>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d106      	bne.n	8000e86 <GPIO_PeriClockControl+0x96>
 8000e78:	4b5e      	ldr	r3, [pc, #376]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	4a5d      	ldr	r2, [pc, #372]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e7e:	f043 0320 	orr.w	r3, r3, #32
 8000e82:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e84:	e0ae      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOG) {GPIOG_PERIPH_CLK_EN();}
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a60      	ldr	r2, [pc, #384]	; (800100c <GPIO_PeriClockControl+0x21c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d106      	bne.n	8000e9c <GPIO_PeriClockControl+0xac>
 8000e8e:	4b59      	ldr	r3, [pc, #356]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a58      	ldr	r2, [pc, #352]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e9a:	e0a3      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOH) {GPIOH_PERIPH_CLK_EN();}
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a5c      	ldr	r2, [pc, #368]	; (8001010 <GPIO_PeriClockControl+0x220>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d106      	bne.n	8000eb2 <GPIO_PeriClockControl+0xc2>
 8000ea4:	4b53      	ldr	r3, [pc, #332]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	4a52      	ldr	r2, [pc, #328]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eb0:	e098      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOI) {GPIOI_PERIPH_CLK_EN();}
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a57      	ldr	r2, [pc, #348]	; (8001014 <GPIO_PeriClockControl+0x224>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d106      	bne.n	8000ec8 <GPIO_PeriClockControl+0xd8>
 8000eba:	4b4e      	ldr	r3, [pc, #312]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a4d      	ldr	r2, [pc, #308]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ec6:	e08d      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOJ) {GPIOJ_PERIPH_CLK_EN();}
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a53      	ldr	r2, [pc, #332]	; (8001018 <GPIO_PeriClockControl+0x228>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d106      	bne.n	8000ede <GPIO_PeriClockControl+0xee>
 8000ed0:	4b48      	ldr	r3, [pc, #288]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	4a47      	ldr	r2, [pc, #284]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eda:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000edc:	e082      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOK) {GPIOK_PERIPH_CLK_EN();}
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4e      	ldr	r2, [pc, #312]	; (800101c <GPIO_PeriClockControl+0x22c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d17e      	bne.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
 8000ee6:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a42      	ldr	r2, [pc, #264]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ef2:	e077      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		if(pGPIOx == GPIOA)      {GPIOA_PERIPH_CLK_DIS();}
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a3e      	ldr	r2, [pc, #248]	; (8000ff0 <GPIO_PeriClockControl+0x200>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d106      	bne.n	8000f0a <GPIO_PeriClockControl+0x11a>
 8000efc:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	4a3c      	ldr	r2, [pc, #240]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f08:	e06c      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOB) {GPIOB_PERIPH_CLK_DIS();}
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a3a      	ldr	r2, [pc, #232]	; (8000ff8 <GPIO_PeriClockControl+0x208>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d106      	bne.n	8000f20 <GPIO_PeriClockControl+0x130>
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a37      	ldr	r2, [pc, #220]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f18:	f023 0302 	bic.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f1e:	e061      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOC) {GPIOC_PERIPH_CLK_DIS();}
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a36      	ldr	r2, [pc, #216]	; (8000ffc <GPIO_PeriClockControl+0x20c>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d106      	bne.n	8000f36 <GPIO_PeriClockControl+0x146>
 8000f28:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	4a31      	ldr	r2, [pc, #196]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f2e:	f023 0304 	bic.w	r3, r3, #4
 8000f32:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f34:	e056      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOD) {GPIOD_PERIPH_CLK_DIS();}
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a31      	ldr	r2, [pc, #196]	; (8001000 <GPIO_PeriClockControl+0x210>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d106      	bne.n	8000f4c <GPIO_PeriClockControl+0x15c>
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a2c      	ldr	r2, [pc, #176]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f44:	f023 0308 	bic.w	r3, r3, #8
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f4a:	e04b      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOE) {GPIOE_PERIPH_CLK_DIS();}
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	; (8001004 <GPIO_PeriClockControl+0x214>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d106      	bne.n	8000f62 <GPIO_PeriClockControl+0x172>
 8000f54:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a26      	ldr	r2, [pc, #152]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f5a:	f023 0310 	bic.w	r3, r3, #16
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f60:	e040      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOF) {GPIOF_PERIPH_CLK_DIS();}
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a28      	ldr	r2, [pc, #160]	; (8001008 <GPIO_PeriClockControl+0x218>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d106      	bne.n	8000f78 <GPIO_PeriClockControl+0x188>
 8000f6a:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a21      	ldr	r2, [pc, #132]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f70:	f023 0320 	bic.w	r3, r3, #32
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f76:	e035      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOG) {GPIOG_PERIPH_CLK_DIS();}
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a24      	ldr	r2, [pc, #144]	; (800100c <GPIO_PeriClockControl+0x21c>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d106      	bne.n	8000f8e <GPIO_PeriClockControl+0x19e>
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f8c:	e02a      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOH) {GPIOH_PERIPH_CLK_DIS();}
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a1f      	ldr	r2, [pc, #124]	; (8001010 <GPIO_PeriClockControl+0x220>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d106      	bne.n	8000fa4 <GPIO_PeriClockControl+0x1b4>
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fa2:	e01f      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOI) {GPIOI_PERIPH_CLK_DIS();}
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <GPIO_PeriClockControl+0x224>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d106      	bne.n	8000fba <GPIO_PeriClockControl+0x1ca>
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fb6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fb8:	e014      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOJ) {GPIOJ_PERIPH_CLK_DIS();}
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a16      	ldr	r2, [pc, #88]	; (8001018 <GPIO_PeriClockControl+0x228>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d106      	bne.n	8000fd0 <GPIO_PeriClockControl+0x1e0>
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fce:	e009      	b.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOK) {GPIOK_PERIPH_CLK_DIS();}
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <GPIO_PeriClockControl+0x22c>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d105      	bne.n	8000fe4 <GPIO_PeriClockControl+0x1f4>
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <GPIO_PeriClockControl+0x204>)
 8000fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fe2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020c00 	.word	0x40020c00
 8001004:	40021000 	.word	0x40021000
 8001008:	40021400 	.word	0x40021400
 800100c:	40021800 	.word	0x40021800
 8001010:	40021c00 	.word	0x40021c00
 8001014:	40022000 	.word	0x40022000
 8001018:	40022400 	.word	0x40022400
 800101c:	40022800 	.word	0x40022800

08001020 <GPIO_ReadFromInputPin>:


// Data IO
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNum)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx -> IDR >> pinNum) & 0x00000001);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	fa22 f303 	lsr.w	r3, r2, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
	return value;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <GPIO_WriteToOutputPin>:
	return value;
}


void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNum, uint8_t data)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
 8001058:	4613      	mov	r3, r2
 800105a:	70bb      	strb	r3, [r7, #2]
	if(data == GPIO_PIN_SET) {pGPIOx -> ODR |= (1 << pinNum);}
 800105c:	78bb      	ldrb	r3, [r7, #2]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d109      	bne.n	8001076 <GPIO_WriteToOutputPin+0x2a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	78fa      	ldrb	r2, [r7, #3]
 8001068:	2101      	movs	r1, #1
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	615a      	str	r2, [r3, #20]
	else {pGPIOx -> ODR &= ~(1 << pinNum);}
}
 8001074:	e009      	b.n	800108a <GPIO_WriteToOutputPin+0x3e>
	else {pGPIOx -> ODR &= ~(1 << pinNum);}
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	78fa      	ldrb	r2, [r7, #3]
 800107c:	2101      	movs	r1, #1
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	43d2      	mvns	r2, r2
 8001084:	401a      	ands	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	615a      	str	r2, [r3, #20]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint8_t APB1_PreScaler[4] = {2, 4, 8, 16};

uint32_t RCC_GetPCLK1Value(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
	uint32_t pclk1, sysClk, temp;
	uint8_t clkSrc, ahbp, apb1p;

	clkSrc = ((RCC -> CFGR >> 2) & 0x03);
 800109e:	4b24      	ldr	r3, [pc, #144]	; (8001130 <RCC_GetPCLK1Value+0x98>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	74fb      	strb	r3, [r7, #19]
	if(clkSrc == 0)      {sysClk = 16000000;}
 80010ac:	7cfb      	ldrb	r3, [r7, #19]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d102      	bne.n	80010b8 <RCC_GetPCLK1Value+0x20>
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <RCC_GetPCLK1Value+0x9c>)
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e00b      	b.n	80010d0 <RCC_GetPCLK1Value+0x38>
	else if(clkSrc == 1) {sysClk = 8000000;}
 80010b8:	7cfb      	ldrb	r3, [r7, #19]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d102      	bne.n	80010c4 <RCC_GetPCLK1Value+0x2c>
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <RCC_GetPCLK1Value+0xa0>)
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	e005      	b.n	80010d0 <RCC_GetPCLK1Value+0x38>
	else if(clkSrc == 2) {sysClk = RCC_GetPLLOutClock();}
 80010c4:	7cfb      	ldrb	r3, [r7, #19]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d102      	bne.n	80010d0 <RCC_GetPCLK1Value+0x38>
 80010ca:	f000 f887 	bl	80011dc <RCC_GetPLLOutClock>
 80010ce:	6178      	str	r0, [r7, #20]

	// For AHB
	temp = ((RCC -> CFGR >> 4) & 0x0F);
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <RCC_GetPCLK1Value+0x98>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	091b      	lsrs	r3, r3, #4
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	60fb      	str	r3, [r7, #12]
	ahbp = (temp < 8) ? 1 : AHB_PreScaler[temp - 8];
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b07      	cmp	r3, #7
 80010e0:	d906      	bls.n	80010f0 <RCC_GetPCLK1Value+0x58>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3b08      	subs	r3, #8
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <RCC_GetPCLK1Value+0xa4>)
 80010e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	e000      	b.n	80010f2 <RCC_GetPCLK1Value+0x5a>
 80010f0:	2301      	movs	r3, #1
 80010f2:	72fb      	strb	r3, [r7, #11]

	// For APB1
	temp = ((RCC -> CFGR >> 10) & 0x07);
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <RCC_GetPCLK1Value+0x98>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	0a9b      	lsrs	r3, r3, #10
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]
	apb1p = (temp < 4) ? 1 : APB1_PreScaler[temp - 4];
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d904      	bls.n	8001110 <RCC_GetPCLK1Value+0x78>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3b04      	subs	r3, #4
 800110a:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <RCC_GetPCLK1Value+0xa8>)
 800110c:	5cd3      	ldrb	r3, [r2, r3]
 800110e:	e000      	b.n	8001112 <RCC_GetPCLK1Value+0x7a>
 8001110:	2301      	movs	r3, #1
 8001112:	72bb      	strb	r3, [r7, #10]

	pclk1 = (sysClk / ahbp) / apb1p;
 8001114:	7afb      	ldrb	r3, [r7, #11]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	fbb2 f2f3 	udiv	r2, r2, r3
 800111c:	7abb      	ldrb	r3, [r7, #10]
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	607b      	str	r3, [r7, #4]
	return pclk1;
 8001124:	687b      	ldr	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	00f42400 	.word	0x00f42400
 8001138:	007a1200 	.word	0x007a1200
 800113c:	20000000 	.word	0x20000000
 8001140:	20000010 	.word	0x20000010

08001144 <RCC_GetPCLK2Value>:


uint32_t RCC_GetPCLK2Value(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
	uint32_t sysClk, pclk2, temp;
	uint8_t clkSrc, ahbp, apb2p;

	clkSrc = ((RCC -> CFGR >> 2) & 0x03);
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <RCC_GetPCLK2Value+0x84>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	75fb      	strb	r3, [r7, #23]
	sysClk = (clkSrc == 0) ? 16000000 : 8000000;
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <RCC_GetPCLK2Value+0x1e>
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <RCC_GetPCLK2Value+0x88>)
 8001160:	e000      	b.n	8001164 <RCC_GetPCLK2Value+0x20>
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <RCC_GetPCLK2Value+0x8c>)
 8001164:	613b      	str	r3, [r7, #16]

	temp = (RCC -> CFGR >> 4) & 0x0F;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <RCC_GetPCLK2Value+0x84>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	60fb      	str	r3, [r7, #12]
	ahbp = (temp < 0x08) ? 1 : AHB_PreScaler[temp - 8];
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b07      	cmp	r3, #7
 8001176:	d906      	bls.n	8001186 <RCC_GetPCLK2Value+0x42>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3b08      	subs	r3, #8
 800117c:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <RCC_GetPCLK2Value+0x90>)
 800117e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	e000      	b.n	8001188 <RCC_GetPCLK2Value+0x44>
 8001186:	2301      	movs	r3, #1
 8001188:	72fb      	strb	r3, [r7, #11]

	temp = (RCC -> CFGR >> 13) & 0x07;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <RCC_GetPCLK2Value+0x84>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	0b5b      	lsrs	r3, r3, #13
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	60fb      	str	r3, [r7, #12]
	apb2p = (temp < 0x04) ? 1 : APB1_PreScaler[temp - 4];
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b03      	cmp	r3, #3
 800119a:	d904      	bls.n	80011a6 <RCC_GetPCLK2Value+0x62>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3b04      	subs	r3, #4
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <RCC_GetPCLK2Value+0x94>)
 80011a2:	5cd3      	ldrb	r3, [r2, r3]
 80011a4:	e000      	b.n	80011a8 <RCC_GetPCLK2Value+0x64>
 80011a6:	2301      	movs	r3, #1
 80011a8:	72bb      	strb	r3, [r7, #10]

	pclk2 = (sysClk / ahbp) / apb2p;
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80011b2:	7abb      	ldrb	r3, [r7, #10]
 80011b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b8:	607b      	str	r3, [r7, #4]
	return pclk2;
 80011ba:	687b      	ldr	r3, [r7, #4]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	40023800 	.word	0x40023800
 80011cc:	00f42400 	.word	0x00f42400
 80011d0:	007a1200 	.word	0x007a1200
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000010 	.word	0x20000010

080011dc <RCC_GetPLLOutClock>:


uint32_t RCC_GetPLLOutClock(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <USART_Init>:
 */

#include "stm32f407xx_usart_driver.h"

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]

	/*************************** Configuration of CR1 *************************************/
	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if(pUSARTHandle -> USART_Config.USART_Mode == USART_MODE_RX)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	791b      	ldrb	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d108      	bne.n	8001212 <USART_Init+0x26>
	{
		//Implement the code to enable the Receiver bit field
		tempreg |= (1 << USART_CR1_RE);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	60fb      	str	r3, [r7, #12]
		tempreg &= ~(1 << USART_CR1_TE);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f023 0308 	bic.w	r3, r3, #8
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e014      	b.n	800123c <USART_Init+0x50>
	}
	else if(pUSARTHandle -> USART_Config.USART_Mode == USART_MODE_TX)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	791b      	ldrb	r3, [r3, #4]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d108      	bne.n	800122c <USART_Init+0x40>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= (1 << USART_CR1_TE);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	60fb      	str	r3, [r7, #12]
		tempreg &= ~(1 << USART_CR1_RE);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f023 0304 	bic.w	r3, r3, #4
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	e007      	b.n	800123c <USART_Init+0x50>
	}
	else if(pUSARTHandle -> USART_Config.USART_Mode == USART_MODE_TXRX)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	791b      	ldrb	r3, [r3, #4]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d103      	bne.n	800123c <USART_Init+0x50>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE));
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f043 030c 	orr.w	r3, r3, #12
 800123a:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle -> USART_Config.USART_WordLength << USART_CR1_M;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7b5b      	ldrb	r3, [r3, #13]
 8001240:	031b      	lsls	r3, r3, #12
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]

    //Configuration of parity control bit fields
	if(pUSARTHandle -> USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7b9b      	ldrb	r3, [r3, #14]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d108      	bne.n	8001264 <USART_Init+0x78>
	{
		//Implement the code to enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001258:	60fb      	str	r3, [r7, #12]

		//Implement the code to enable EVEN parity
		tempreg &= ~(1 << 9);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	e00b      	b.n	800127c <USART_Init+0x90>
		//(Not required because by default EVEN parity will be selected once parity control is enabled)
	}
	else if (pUSARTHandle -> USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7b9b      	ldrb	r3, [r3, #14]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d107      	bne.n	800127c <USART_Init+0x90>
	{
		//Implement the code to enable the parity control
	    tempreg |= (1 << USART_CR1_PCE);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001272:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= (1 << 9);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127a:	60fb      	str	r3, [r7, #12]
	}

	//Program the CR1 register
	pUSARTHandle -> pUSARTx -> CR1 = tempreg;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	60da      	str	r2, [r3, #12]

	/*************************** Configuration of CR2 *************************************/
	tempreg = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle -> USART_Config.USART_StopBitNum << USART_CR2_STOP;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7b1b      	ldrb	r3, [r3, #12]
 800128c:	031b      	lsls	r3, r3, #12
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle -> pUSARTx -> CR2 = tempreg;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	611a      	str	r2, [r3, #16]

	/*************************** Configuration of CR3 ***************************/
	tempreg = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if(pUSARTHandle -> USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7bdb      	ldrb	r3, [r3, #15]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d104      	bne.n	80012b4 <USART_Init+0xc8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= (1 << USART_CR3_CTSE);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	e010      	b.n	80012d6 <USART_Init+0xea>
	}
	else if (pUSARTHandle -> USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7bdb      	ldrb	r3, [r3, #15]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d104      	bne.n	80012c6 <USART_Init+0xda>
	{
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e007      	b.n	80012d6 <USART_Init+0xea>
	}
	else if (pUSARTHandle -> USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7bdb      	ldrb	r3, [r3, #15]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d103      	bne.n	80012d6 <USART_Init+0xea>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ((1 << USART_CR3_RTSE) | (1 << USART_CR3_CTSE));
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80012d4:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle -> pUSARTx -> CR3 = tempreg;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	615a      	str	r2, [r3, #20]

	/********************** Configuration of BRR(Baudrate register) ********************************/

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle -> pUSARTx, pUSARTHandle -> USART_Config.USART_Baud);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	4619      	mov	r1, r3
 80012e8:	4610      	mov	r0, r2
 80012ea:	f000 fbc7 	bl	8001a7c <USART_SetBaudRate>
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <USART_PeriClockControl>:

void USART_DeInit(USART_RegDef_t *pUSARTx){}


void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t state)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE)
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d141      	bne.n	800138e <USART_PeriClockControl+0x96>
	{
		if(pUSARTx == USART1)      {USART1_PERIPH_CLK_EN();}
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a43      	ldr	r2, [pc, #268]	; (800141c <USART_PeriClockControl+0x124>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d106      	bne.n	8001320 <USART_PeriClockControl+0x28>
 8001312:	4b43      	ldr	r3, [pc, #268]	; (8001420 <USART_PeriClockControl+0x128>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a42      	ldr	r2, [pc, #264]	; (8001420 <USART_PeriClockControl+0x128>)
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pUSARTx == USART3) {USART3_PERIPH_CLK_DIS();}
		else if(pUSARTx == UART4)  {UART4_PERIPH_CLK_DIS();}
		else if(pUSARTx == UART5)  {UART5_PERIPH_CLK_DIS();}
		else if(pUSARTx == USART6) {USART6_PERIPH_CLK_DIS();}
	}
}
 800131e:	e077      	b.n	8001410 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART2) {USART2_PERIPH_CLK_EN();}
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a40      	ldr	r2, [pc, #256]	; (8001424 <USART_PeriClockControl+0x12c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d106      	bne.n	8001336 <USART_PeriClockControl+0x3e>
 8001328:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <USART_PeriClockControl+0x128>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	4a3c      	ldr	r2, [pc, #240]	; (8001420 <USART_PeriClockControl+0x128>)
 800132e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001332:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001334:	e06c      	b.n	8001410 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART3) {USART3_PERIPH_CLK_EN();}
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a3b      	ldr	r2, [pc, #236]	; (8001428 <USART_PeriClockControl+0x130>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d106      	bne.n	800134c <USART_PeriClockControl+0x54>
 800133e:	4b38      	ldr	r3, [pc, #224]	; (8001420 <USART_PeriClockControl+0x128>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a37      	ldr	r2, [pc, #220]	; (8001420 <USART_PeriClockControl+0x128>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
}
 800134a:	e061      	b.n	8001410 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART4)  {UART4_PERIPH_CLK_EN();}
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a37      	ldr	r2, [pc, #220]	; (800142c <USART_PeriClockControl+0x134>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d106      	bne.n	8001362 <USART_PeriClockControl+0x6a>
 8001354:	4b32      	ldr	r3, [pc, #200]	; (8001420 <USART_PeriClockControl+0x128>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	4a31      	ldr	r2, [pc, #196]	; (8001420 <USART_PeriClockControl+0x128>)
 800135a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800135e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001360:	e056      	b.n	8001410 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5)  {UART5_PERIPH_CLK_EN();}
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a32      	ldr	r2, [pc, #200]	; (8001430 <USART_PeriClockControl+0x138>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d106      	bne.n	8001378 <USART_PeriClockControl+0x80>
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <USART_PeriClockControl+0x128>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a2c      	ldr	r2, [pc, #176]	; (8001420 <USART_PeriClockControl+0x128>)
 8001370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001376:	e04b      	b.n	8001410 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6) {USART6_PERIPH_CLK_EN();}
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a2e      	ldr	r2, [pc, #184]	; (8001434 <USART_PeriClockControl+0x13c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d147      	bne.n	8001410 <USART_PeriClockControl+0x118>
 8001380:	4b27      	ldr	r3, [pc, #156]	; (8001420 <USART_PeriClockControl+0x128>)
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	4a26      	ldr	r2, [pc, #152]	; (8001420 <USART_PeriClockControl+0x128>)
 8001386:	f043 0320 	orr.w	r3, r3, #32
 800138a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800138c:	e040      	b.n	8001410 <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1)      {USART1_PERIPH_CLK_DIS();}
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a22      	ldr	r2, [pc, #136]	; (800141c <USART_PeriClockControl+0x124>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d106      	bne.n	80013a4 <USART_PeriClockControl+0xac>
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <USART_PeriClockControl+0x128>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a21      	ldr	r2, [pc, #132]	; (8001420 <USART_PeriClockControl+0x128>)
 800139c:	f023 0310 	bic.w	r3, r3, #16
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
}
 80013a2:	e035      	b.n	8001410 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART2) {USART2_PERIPH_CLK_DIS();}
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a1f      	ldr	r2, [pc, #124]	; (8001424 <USART_PeriClockControl+0x12c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d106      	bne.n	80013ba <USART_PeriClockControl+0xc2>
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <USART_PeriClockControl+0x128>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <USART_PeriClockControl+0x128>)
 80013b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80013b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013b8:	e02a      	b.n	8001410 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART3) {USART3_PERIPH_CLK_DIS();}
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <USART_PeriClockControl+0x130>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d106      	bne.n	80013d0 <USART_PeriClockControl+0xd8>
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <USART_PeriClockControl+0x128>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a16      	ldr	r2, [pc, #88]	; (8001420 <USART_PeriClockControl+0x128>)
 80013c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013ce:	e01f      	b.n	8001410 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART4)  {UART4_PERIPH_CLK_DIS();}
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a16      	ldr	r2, [pc, #88]	; (800142c <USART_PeriClockControl+0x134>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d106      	bne.n	80013e6 <USART_PeriClockControl+0xee>
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <USART_PeriClockControl+0x128>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	4a10      	ldr	r2, [pc, #64]	; (8001420 <USART_PeriClockControl+0x128>)
 80013de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80013e2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013e4:	e014      	b.n	8001410 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5)  {UART5_PERIPH_CLK_DIS();}
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <USART_PeriClockControl+0x138>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d106      	bne.n	80013fc <USART_PeriClockControl+0x104>
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <USART_PeriClockControl+0x128>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <USART_PeriClockControl+0x128>)
 80013f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013fa:	e009      	b.n	8001410 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6) {USART6_PERIPH_CLK_DIS();}
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <USART_PeriClockControl+0x13c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d105      	bne.n	8001410 <USART_PeriClockControl+0x118>
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <USART_PeriClockControl+0x128>)
 8001406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001408:	4a05      	ldr	r2, [pc, #20]	; (8001420 <USART_PeriClockControl+0x128>)
 800140a:	f023 0320 	bic.w	r3, r3, #32
 800140e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40011000 	.word	0x40011000
 8001420:	40023800 	.word	0x40023800
 8001424:	40004400 	.word	0x40004400
 8001428:	40004800 	.word	0x40004800
 800142c:	40004c00 	.word	0x40004c00
 8001430:	40005000 	.word	0x40005000
 8001434:	40011400 	.word	0x40011400

08001438 <USART_SendData>:


void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTXBuffer, uint32_t length)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
	//Loop over until "length" number of bytes are transferred
	for(uint32_t i = 0 ; i < length; i++)
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	e031      	b.n	80014ae <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(!USART_GetFlagStatus(pUSARTHandle -> pUSARTx, USART_FLAG_TXE));
 800144a:	bf00      	nop
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fba0 	bl	8001b98 <USART_GetFlagStatus>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f6      	beq.n	800144c <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle -> USART_Config.USART_WordLength == USART_WORDLENGTH_9)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	7b5b      	ldrb	r3, [r3, #13]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d118      	bne.n	8001498 <USART_SendData+0x60>
		{
			//if 9-BIT, load the DR with 2 bytes masking the bits other than first 9 bits
			pdata = (uint16_t*)pTXBuffer;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	613b      	str	r3, [r7, #16]
			pUSARTHandle -> pUSARTx -> DR = (*pdata & (uint16_t)0x01FF);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001478:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle -> USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	7b9b      	ldrb	r3, [r3, #14]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTXBuffer++;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	3301      	adds	r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
				pTXBuffer++;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	3301      	adds	r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	e00b      	b.n	80014a8 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer. So, 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTXBuffer++;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	3301      	adds	r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	e007      	b.n	80014a8 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle -> pUSARTx -> DR = (*pTXBuffer & (uint8_t)0xFF);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	781a      	ldrb	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTXBuffer++;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < length; i++)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3301      	adds	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3c9      	bcc.n	800144a <USART_SendData+0x12>
		}
	}
	//Implement the code to wait till TC flag is set in the SR
	while(!USART_GetFlagStatus(pUSARTHandle -> pUSARTx, USART_FLAG_TC));
 80014b6:	bf00      	nop
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2140      	movs	r1, #64	; 0x40
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fb6a 	bl	8001b98 <USART_GetFlagStatus>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f6      	beq.n	80014b8 <USART_SendData+0x80>
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <USART_ReceiveData>:


void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRXBuffer, uint32_t length)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
	//Loop over until "length" number of bytes are transferred
	for(uint32_t i = 0; i < length; i++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e045      	b.n	8001572 <USART_ReceiveData+0x9e>
	{
		//Implement the code to wait until RXNE flag is set in the SR
		while(!USART_GetFlagStatus(pUSARTHandle -> pUSARTx, USART_FLAG_RXNE));
 80014e6:	bf00      	nop
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2120      	movs	r1, #32
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fb52 	bl	8001b98 <USART_GetFlagStatus>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f6      	beq.n	80014e8 <USART_ReceiveData+0x14>

		//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
		if(pUSARTHandle -> USART_Config.USART_WordLength == USART_WORDLENGTH_9)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	7b5b      	ldrb	r3, [r3, #13]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d11d      	bne.n	800153e <USART_ReceiveData+0x6a>
		{
			//We are going to receive 9bit data in a frame
			//check are we using USART_ParityControl control or not
			if(pUSARTHandle -> USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	7b9b      	ldrb	r3, [r3, #14]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10f      	bne.n	800152a <USART_ReceiveData+0x56>
			{
				//No parity is used. so, all 9bits will be of user data
				//read only first 9 bits. so, mask the DR with 0x01FF
				*((uint16_t*)pRXBuffer) = (pUSARTHandle -> pUSARTx -> DR & (uint16_t)0x01FF);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	b29b      	uxth	r3, r3
 8001512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001516:	b29a      	uxth	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	801a      	strh	r2, [r3, #0]

				//Now increment the pRxBuffer two times
				pRXBuffer++;
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3301      	adds	r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
				pRXBuffer++;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3301      	adds	r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	e020      	b.n	800156c <USART_ReceiveData+0x98>
			}
			else
			{
				//Parity is used, so, 8bits will be of user data and 1 bit is parity
				*pRXBuffer = (pUSARTHandle -> pUSARTx -> DR & (uint8_t)0xFF);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	701a      	strb	r2, [r3, #0]

				//Increment the pRxBuffer
				pRXBuffer++;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3301      	adds	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	e016      	b.n	800156c <USART_ReceiveData+0x98>
		}
		else
		{
			//We are going to receive 8bit data in a frame
			//check are we using USART_ParityControl control or not
			if(pUSARTHandle -> USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	7b9b      	ldrb	r3, [r3, #14]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d106      	bne.n	8001554 <USART_ReceiveData+0x80>
			{
				//No parity is used , so all 8bits will be of user data
				//read 8 bits from DR
				*pRXBuffer = (uint8_t)(pUSARTHandle -> pUSARTx -> DR & (uint8_t)0xFF);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	e008      	b.n	8001566 <USART_ReceiveData+0x92>
			}
			else
			{
				//Parity is used, so , 7 bits will be of user data and 1 bit is parity
				//read only 7 bits , hence mask the DR with 0X7F
				*pRXBuffer = (uint8_t)(pUSARTHandle -> pUSARTx -> DR & (uint8_t)0x7F);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001560:	b2da      	uxtb	r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	701a      	strb	r2, [r3, #0]

			}
			//increment the pRxBuffer
			pRXBuffer++;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3301      	adds	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0; i < length; i++)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	d3b5      	bcc.n	80014e6 <USART_ReceiveData+0x12>
		}
	}
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <USART_SendDataIT>:


uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pTXBuffer, uint32_t length)
{
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
	uint8_t txstate = pUSARTHandle -> TXBusyState;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001596:	75fb      	strb	r3, [r7, #23]
	if(txstate != USART_BUSY_TX)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d019      	beq.n	80015d2 <USART_SendDataIT+0x4e>
	{
		pUSARTHandle -> TXLength = length;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
		pUSARTHandle -> pTXBuffer = pTXBuffer;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	611a      	str	r2, [r3, #16]
		pUSARTHandle -> TXBusyState = USART_BUSY_TX;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2202      	movs	r2, #2
 80015ae:	f883 2020 	strb.w	r2, [r3, #32]

		//Implement the code to enable interrupt for TXE
		pUSARTHandle -> pUSARTx -> CR1 |= (1 << USART_CR1_TXEIE);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015c0:	60da      	str	r2, [r3, #12]

		//Implement the code to enable interrupt for TC
		pUSARTHandle -> pUSARTx -> CR1 |= (1 << USART_CR1_TCIE);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d0:	60da      	str	r2, [r3, #12]
	}
	return txstate;
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <USART_ReceiveDataIT>:


uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRXBuffer, uint32_t length)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle -> RXBusyState;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015f2:	75fb      	strb	r3, [r7, #23]
	if(rxstate != USART_BUSY_RX)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d011      	beq.n	800161e <USART_ReceiveDataIT+0x3e>
	{
		pUSARTHandle -> RXLength = length;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	61da      	str	r2, [r3, #28]
		pUSARTHandle -> pRXBuffer = pRXBuffer;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	615a      	str	r2, [r3, #20]
		pUSARTHandle -> RXBusyState = USART_BUSY_RX;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle -> pUSARTx -> CR1 |= (1 << USART_CR1_RXNEIE);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0220 	orr.w	r2, r2, #32
 800161c:	60da      	str	r2, [r3, #12]
	}
	return rxstate;
 800161e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001620:	4618      	mov	r0, r3
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <USART_IRQInterruptConfig>:

// IRQ Configuration and ISR Handling
void USART_IRQInterruptConfig(uint8_t IRQNum, uint8_t state)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	460a      	mov	r2, r1
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	4613      	mov	r3, r2
 800163a:	71bb      	strb	r3, [r7, #6]
	if(state == ENABLE)
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d133      	bne.n	80016aa <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNum <= 31)                    {*NVIC_ISER0 |= (1 << IRQNum);}        // Program ISER0 Register
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b1f      	cmp	r3, #31
 8001646:	d80a      	bhi.n	800165e <USART_IRQInterruptConfig+0x32>
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <USART_IRQInterruptConfig+0xf4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	79fa      	ldrb	r2, [r7, #7]
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	4611      	mov	r1, r2
 8001656:	4a32      	ldr	r2, [pc, #200]	; (8001720 <USART_IRQInterruptConfig+0xf4>)
 8001658:	430b      	orrs	r3, r1
 800165a:	6013      	str	r3, [r2, #0]
	{
		if(IRQNum <= 31)                    {*NVIC_ICER0 |= (1 << IRQNum);}        // Program ICER0 Register
		else if(IRQNum > 31 && IRQNum < 64) {*NVIC_ICER1 |= (1 << (IRQNum % 32));} // Program ICER1 Register
		else if(IRQNum >= 64 && IRQNum < 96){*NVIC_ICER2 |= (1 << (IRQNum % 64));} // Program ICER2 Register
	}
}
 800165c:	e059      	b.n	8001712 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNum > 31 && IRQNum < 64) {*NVIC_ISER1 |= (1 << (IRQNum % 32));} // Program ISER1 Register
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b1f      	cmp	r3, #31
 8001662:	d90f      	bls.n	8001684 <USART_IRQInterruptConfig+0x58>
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b3f      	cmp	r3, #63	; 0x3f
 8001668:	d80c      	bhi.n	8001684 <USART_IRQInterruptConfig+0x58>
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <USART_IRQInterruptConfig+0xf8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	79fa      	ldrb	r2, [r7, #7]
 8001670:	f002 021f 	and.w	r2, r2, #31
 8001674:	2101      	movs	r1, #1
 8001676:	fa01 f202 	lsl.w	r2, r1, r2
 800167a:	4611      	mov	r1, r2
 800167c:	4a29      	ldr	r2, [pc, #164]	; (8001724 <USART_IRQInterruptConfig+0xf8>)
 800167e:	430b      	orrs	r3, r1
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e046      	b.n	8001712 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNum >= 64 && IRQNum < 96){*NVIC_ISER2 |= (1 << (IRQNum % 64));} // Program ISER2 Register
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b3f      	cmp	r3, #63	; 0x3f
 8001688:	d943      	bls.n	8001712 <USART_IRQInterruptConfig+0xe6>
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2b5f      	cmp	r3, #95	; 0x5f
 800168e:	d840      	bhi.n	8001712 <USART_IRQInterruptConfig+0xe6>
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <USART_IRQInterruptConfig+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	79fa      	ldrb	r2, [r7, #7]
 8001696:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	4611      	mov	r1, r2
 80016a2:	4a21      	ldr	r2, [pc, #132]	; (8001728 <USART_IRQInterruptConfig+0xfc>)
 80016a4:	430b      	orrs	r3, r1
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	e033      	b.n	8001712 <USART_IRQInterruptConfig+0xe6>
		if(IRQNum <= 31)                    {*NVIC_ICER0 |= (1 << IRQNum);}        // Program ICER0 Register
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b1f      	cmp	r3, #31
 80016ae:	d80a      	bhi.n	80016c6 <USART_IRQInterruptConfig+0x9a>
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <USART_IRQInterruptConfig+0x100>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	79fa      	ldrb	r2, [r7, #7]
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	4611      	mov	r1, r2
 80016be:	4a1b      	ldr	r2, [pc, #108]	; (800172c <USART_IRQInterruptConfig+0x100>)
 80016c0:	430b      	orrs	r3, r1
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	e025      	b.n	8001712 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNum > 31 && IRQNum < 64) {*NVIC_ICER1 |= (1 << (IRQNum % 32));} // Program ICER1 Register
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b1f      	cmp	r3, #31
 80016ca:	d90f      	bls.n	80016ec <USART_IRQInterruptConfig+0xc0>
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b3f      	cmp	r3, #63	; 0x3f
 80016d0:	d80c      	bhi.n	80016ec <USART_IRQInterruptConfig+0xc0>
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <USART_IRQInterruptConfig+0x104>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	79fa      	ldrb	r2, [r7, #7]
 80016d8:	f002 021f 	and.w	r2, r2, #31
 80016dc:	2101      	movs	r1, #1
 80016de:	fa01 f202 	lsl.w	r2, r1, r2
 80016e2:	4611      	mov	r1, r2
 80016e4:	4a12      	ldr	r2, [pc, #72]	; (8001730 <USART_IRQInterruptConfig+0x104>)
 80016e6:	430b      	orrs	r3, r1
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e012      	b.n	8001712 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNum >= 64 && IRQNum < 96){*NVIC_ICER2 |= (1 << (IRQNum % 64));} // Program ICER2 Register
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b3f      	cmp	r3, #63	; 0x3f
 80016f0:	d90f      	bls.n	8001712 <USART_IRQInterruptConfig+0xe6>
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b5f      	cmp	r3, #95	; 0x5f
 80016f6:	d80c      	bhi.n	8001712 <USART_IRQInterruptConfig+0xe6>
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <USART_IRQInterruptConfig+0x108>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	79fa      	ldrb	r2, [r7, #7]
 80016fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001702:	2101      	movs	r1, #1
 8001704:	fa01 f202 	lsl.w	r2, r1, r2
 8001708:	4611      	mov	r1, r2
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <USART_IRQInterruptConfig+0x108>)
 800170c:	430b      	orrs	r3, r1
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	e7ff      	b.n	8001712 <USART_IRQInterruptConfig+0xe6>
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000e104 	.word	0xe000e104
 8001728:	e000e108 	.word	0xe000e108
 800172c:	e000e180 	.word	0xe000e180
 8001730:	e000e184 	.word	0xe000e184
 8001734:	e000e188 	.word	0xe000e188

08001738 <USART_IRQHandling>:
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASEADDR + iprx) |= (IRQPriority << shift_amount);
}

void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2, temp3;
	uint16_t *pdata;

	// !!! Check for TC Flag !!!
	//Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle -> pUSARTx -> SR & (1 << USART_SR_TC);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174a:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle -> pUSARTx -> CR1 & (1 << USART_CR1_TCIE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001756:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d021      	beq.n	80017a2 <USART_IRQHandling+0x6a>
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01e      	beq.n	80017a2 <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC
		//close transmission and call application callback if TxLen is zero
		if(pUSARTHandle -> TXBusyState == USART_BUSY_TX)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d119      	bne.n	80017a2 <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(!pUSARTHandle -> TXLength)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d115      	bne.n	80017a2 <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle -> pUSARTx -> SR &= ~(1 << USART_SR_TC);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001784:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit
				//Reset the application state
				pUSARTHandle -> TXBusyState = USART_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle -> pTXBuffer = NULL;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle -> TXLength = 0;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_TX_CMPLT);
 800179a:	2100      	movs	r1, #0
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fa0f 	bl	8001bc0 <USART_ApplicationEventCallback>
		}
	}

	// !!! Check for TXE Flag !!!
	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle -> pUSARTx -> SR & (1 << USART_SR_TXE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ac:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle -> pUSARTx -> CR1 & (1 << USART_CR1_TXEIE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b8:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d055      	beq.n	800186c <USART_IRQHandling+0x134>
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d052      	beq.n	800186c <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE
		if(pUSARTHandle -> TXBusyState == USART_BUSY_TX)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d14d      	bne.n	800186c <USART_IRQHandling+0x134>
		{
			//Keep sending data until TXLength reaches to zero
			if(pUSARTHandle -> TXLength > 0)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d03d      	beq.n	8001854 <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle -> USART_Config.USART_WordLength == USART_WORDLENGTH_9)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7b5b      	ldrb	r3, [r3, #13]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d129      	bne.n	8001834 <USART_IRQHandling+0xfc>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle -> pTXBuffer;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	60fb      	str	r3, [r7, #12]
					pUSARTHandle -> pUSARTx -> DR = (*pdata & (uint16_t)0x01FF);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017f4:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle -> USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7b9b      	ldrb	r3, [r3, #14]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10f      	bne.n	800181e <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle -> pTXBuffer++;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	611a      	str	r2, [r3, #16]
						pUSARTHandle -> pTXBuffer++;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]
						pUSARTHandle -> TXLength -= 2;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	1e9a      	subs	r2, r3, #2
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
 800181c:	e01a      	b.n	8001854 <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle -> pTXBuffer++;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	611a      	str	r2, [r3, #16]
						pUSARTHandle -> TXLength -= 1;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	1e5a      	subs	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	619a      	str	r2, [r3, #24]
 8001832:	e00f      	b.n	8001854 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle -> pUSARTx -> DR = (*pUSARTHandle -> pTXBuffer & (uint8_t)0xFF);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	781a      	ldrb	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle -> pTXBuffer++;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	611a      	str	r2, [r3, #16]
					pUSARTHandle -> TXLength -= 1;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	1e5a      	subs	r2, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	619a      	str	r2, [r3, #24]
				}
			}
			if(pUSARTHandle -> TXLength == 0)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d107      	bne.n	800186c <USART_IRQHandling+0x134>
			{
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle -> pUSARTx -> CR1 &= ~(1 << USART_CR1_TXEIE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800186a:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// !!! Check for RXNE Flag !!!
	temp1 = pUSARTHandle -> pUSARTx -> SR & (1 << USART_SR_RXNE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle -> pUSARTx -> CR1 & (1 << USART_CR1_RXNEIE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	f003 0320 	and.w	r3, r3, #32
 8001882:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d073      	beq.n	8001972 <USART_IRQHandling+0x23a>
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d070      	beq.n	8001972 <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle -> RXBusyState == USART_BUSY_RX)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001896:	2b01      	cmp	r3, #1
 8001898:	d16b      	bne.n	8001972 <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle -> RXLength > 0)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d053      	beq.n	800194a <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle -> USART_Config.USART_WordLength == USART_WORDLENGTH_9)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7b5b      	ldrb	r3, [r3, #13]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d12f      	bne.n	800190a <USART_IRQHandling+0x1d2>
				{
					//Receive 9bits of data in a frame
					//Now, check if using USART_ParityControl control or not
					if(pUSARTHandle -> USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7b9b      	ldrb	r3, [r3, #14]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d119      	bne.n	80018e6 <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data
						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle -> pRXBuffer) = (pUSARTHandle -> pUSARTx -> DR & (uint16_t)0x01FF);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018c2:	b292      	uxth	r2, r2
 80018c4:	801a      	strh	r2, [r3, #0]

						//Now increment the pRXBuffer two times
						pUSARTHandle -> pRXBuffer++;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	615a      	str	r2, [r3, #20]
						pUSARTHandle -> pRXBuffer++;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	615a      	str	r2, [r3, #20]
						pUSARTHandle -> RXLength -= 2;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	1e9a      	subs	r2, r3, #2
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	61da      	str	r2, [r3, #28]
 80018e4:	e031      	b.n	800194a <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						*pUSARTHandle -> pRXBuffer = (pUSARTHandle -> pUSARTx -> DR & (uint8_t)0xFF);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	701a      	strb	r2, [r3, #0]
						pUSARTHandle -> pRXBuffer++;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	615a      	str	r2, [r3, #20]
						pUSARTHandle -> RXLength -= 1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	1e5a      	subs	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	61da      	str	r2, [r3, #28]
 8001908:	e01f      	b.n	800194a <USART_IRQHandling+0x212>
				}
				else
				{
					//8bits of data will be received in a frame
					//Now, check if using USART_ParityControl control or not
					if(pUSARTHandle -> USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7b9b      	ldrb	r3, [r3, #14]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d107      	bne.n	8001922 <USART_IRQHandling+0x1ea>
					{
						//No parity is used, so all 8bits will be of user data
						//read 8 bits from DR
						 *pUSARTHandle -> pRXBuffer = (uint8_t)(pUSARTHandle -> pUSARTx -> DR & (uint8_t)0xFF);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	701a      	strb	r2, [r3, #0]
 8001920:	e009      	b.n	8001936 <USART_IRQHandling+0x1fe>
					}
					else
					{
						//Parity is used, so 7 bits will be of user data and 1 bit is parity
						//read only 7 bits, hence mask the DR with 0X7F
						*pUSARTHandle -> pRXBuffer = (uint8_t)(pUSARTHandle -> pUSARTx -> DR & (uint8_t)0x7F);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]
					}
					//Now , increment the pRXBuffer
					pUSARTHandle -> pRXBuffer++;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	615a      	str	r2, [r3, #20]
					pUSARTHandle -> RXLength -= 1;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	61da      	str	r2, [r3, #28]
				}
			}
			if(!pUSARTHandle -> RXLength)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10f      	bne.n	8001972 <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle -> pUSARTx -> CR1 &= ~(1 << USART_CR1_RXNEIE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0220 	bic.w	r2, r2, #32
 8001960:	60da      	str	r2, [r3, #12]
				pUSARTHandle -> RXBusyState = USART_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_RX_CMPLT);
 800196a:	2101      	movs	r1, #1
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f927 	bl	8001bc0 <USART_ApplicationEventCallback>
	}

	// !!! Check for CTS Flag !!!
	// Note: CTS feature is not applicable for UART4 and UART5
	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle -> pUSARTx -> SR & (1 << USART_SR_CTS);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197c:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle -> pUSARTx -> CR3 & (1 << USART_CR3_CTSE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001988:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle -> pUSARTx -> CR3 & (1 << USART_CR3_CTSIE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001994:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <USART_IRQHandling+0x282>
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle -> pUSARTx -> SR &= ~(1 << USART_SR_CTS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b0:	601a      	str	r2, [r3, #0]

		//this interrupt is because of CTS
		USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_CTS);
 80019b2:	2103      	movs	r1, #3
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f903 	bl	8001bc0 <USART_ApplicationEventCallback>
	}

	// !!! Check for IDLE detection flag !!!
	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle -> pUSARTx -> SR & (1 << USART_SR_IDLE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle -> pUSARTx -> CR1 & (1 << USART_CR1_IDLEIE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00f      	beq.n	80019f8 <USART_IRQHandling+0x2c0>
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00c      	beq.n	80019f8 <USART_IRQHandling+0x2c0>
	{
		//Implement the code to clear the IDLE flag.
		temp1 = pUSARTHandle -> pUSARTx -> SR &= ~(1 << USART_SR_IDLE);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	f023 0310 	bic.w	r3, r3, #16
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle, USART_EVENT_IDLE);
 80019f0:	2102      	movs	r1, #2
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f8e4 	bl	8001bc0 <USART_ApplicationEventCallback>
	}

	// !!! Check for Overrun detection flag !!!
	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle -> pUSARTx -> SR & USART_SR_ORE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle -> pUSARTx -> CR1 & USART_CR1_RXNEIE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f003 0305 	and.w	r3, r3, #5
 8001a0e:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <USART_IRQHandling+0x2ec>
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <USART_IRQHandling+0x2ec>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag.
		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
 8001a1c:	2107      	movs	r1, #7
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f8ce 	bl	8001bc0 <USART_ApplicationEventCallback>

	// !!! Check for Error Flag !!!
	//Noise Flag, Overrun error and Framing Error in multibuffer communication
	//Multibuffer communication is outside scope of knowledge for now.
	//The below code will get executed in only if multibuffer mode is used.
	temp2 =  pUSARTHandle -> pUSARTx -> CR3 & (1 << USART_CR3_EIE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]

	if(temp2)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01e      	beq.n	8001a74 <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle -> pUSARTx -> SR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	617b      	str	r3, [r7, #20]
		if(temp1 & (1 << USART_SR_FE))
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <USART_IRQHandling+0x318>
			/*
			 * This bit is set by hardware when a de-synchronization, excessive noise or a break character
			 * is detected. It is cleared by a software sequence (an read to the USART_SR register
			 * followed by a read to the USART_DR register).
			 */
			USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_FE);
 8001a48:	2105      	movs	r1, #5
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8b8 	bl	8001bc0 <USART_ApplicationEventCallback>
		}
		if(temp1 & (1 << USART_SR_NE))
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <USART_IRQHandling+0x32a>
			/*
			 * This bit is set by hardware when noise is detected on a received frame. It is cleared by a
			 * software sequence (an read to the USART_SR register followed by a read to the
			 * USART_DR register).
			 */
			USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_NE);
 8001a5a:	2106      	movs	r1, #6
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f8af 	bl	8001bc0 <USART_ApplicationEventCallback>
		}
		if(temp1 & (1 << USART_SR_ORE))
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
 8001a6c:	2107      	movs	r1, #7
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f8a6 	bl	8001bc0 <USART_ApplicationEventCallback>
		}
	}
}
 8001a74:	bf00      	nop
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <USART_SetBaudRate>:


// Other Peripheral Control API's
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	// variables to hold the Mantissa and fraction values
	uint32_t m_part, f_part;

	uint32_t tempreg = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]

	// Get the value of the APB bus clock into the variable PCLKx
	// Check if USART1 and USART6 are hanging onto the APB2 bus
	PCLKx = (pUSARTx == USART1 || pUSARTx == USART6) ? RCC_GetPCLK2Value() : RCC_GetPCLK1Value();
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a31      	ldr	r2, [pc, #196]	; (8001b54 <USART_SetBaudRate+0xd8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d003      	beq.n	8001a9a <USART_SetBaudRate+0x1e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a30      	ldr	r2, [pc, #192]	; (8001b58 <USART_SetBaudRate+0xdc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d103      	bne.n	8001aa2 <USART_SetBaudRate+0x26>
 8001a9a:	f7ff fb53 	bl	8001144 <RCC_GetPCLK2Value>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	e002      	b.n	8001aa8 <USART_SetBaudRate+0x2c>
 8001aa2:	f7ff faf9 	bl	8001098 <RCC_GetPCLK1Value>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	613b      	str	r3, [r7, #16]

	// Check for OVER8 configuration bit
	if(pUSARTx -> CR1 & (1 << USART_CR1_OVER8))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <USART_SetBaudRate+0x52>
	{
		// OVER8 == 1, over-sample by 8
		usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	009a      	lsls	r2, r3, #2
 8001ac0:	441a      	add	r2, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	e00a      	b.n	8001ae4 <USART_SetBaudRate+0x68>
	}
	else
	{
		// over-sample by 16
		usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009a      	lsls	r2, r3, #2
 8001ad8:	441a      	add	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	61fb      	str	r3, [r7, #28]
	}

	// Calculate the Mantissa part
	m_part = usartdiv / 100;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <USART_SetBaudRate+0xe0>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	60fb      	str	r3, [r7, #12]

	// Place Mantissa part in the appropriate bit position
	tempreg |= m_part << 4;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]

	// Extract the Fraction part
	f_part = (usartdiv - (m_part * 100));
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2264      	movs	r2, #100	; 0x64
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	61bb      	str	r3, [r7, #24]

	// Calculate the fractional part
	if(pUSARTx -> CR1 & (1 << USART_CR1_OVER8))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00a      	beq.n	8001b2a <USART_SetBaudRate+0xae>
	{
		// if OVER8 == 1, over-sample by 8
		f_part = (((f_part * 8) + 50) / 100) & ((uint8_t)0x07);
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	3332      	adds	r3, #50	; 0x32
 8001b1a:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <USART_SetBaudRate+0xe0>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	e009      	b.n	8001b3e <USART_SetBaudRate+0xc2>
	}
	else
	{
		// over-sample by 16
		f_part = (((f_part * 16) + 50) / 100) & ((uint8_t)0x0F);
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	3332      	adds	r3, #50	; 0x32
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <USART_SetBaudRate+0xe0>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	61bb      	str	r3, [r7, #24]
	}

	// Place fractional part in the appropriate bit position (USART_BRR)
	tempreg |= f_part;
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	617b      	str	r3, [r7, #20]

	// Program the value of tempreg into the BRR register
	pUSARTx -> BRR = tempreg;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	609a      	str	r2, [r3, #8]
}
 8001b4c:	bf00      	nop
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40011000 	.word	0x40011000
 8001b58:	40011400 	.word	0x40011400
 8001b5c:	51eb851f 	.word	0x51eb851f

08001b60 <USART_PeripheralControl>:


void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t state)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE) {pUSARTx -> CR1 |= (1 << 13);}
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d106      	bne.n	8001b80 <USART_PeripheralControl+0x20>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60da      	str	r2, [r3, #12]
	else                {pUSARTx -> CR1 &= ~(1 << 13);}
}
 8001b7e:	e005      	b.n	8001b8c <USART_PeripheralControl+0x2c>
	else                {pUSARTx -> CR1 &= ~(1 << 13);}
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t statusFlagName)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
    if(pUSARTx -> SR & statusFlagName) {return SET;}
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <USART_GetFlagStatus+0x1a>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <USART_GetFlagStatus+0x1c>
    return RESET;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <USART_ApplicationEventCallback>:
{
	pUSARTx -> SR &= ~(statusFlagName);
}


void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle, uint8_t event) {}
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <__libc_init_array>:
 8001bd8:	b570      	push	{r4, r5, r6, lr}
 8001bda:	4d0d      	ldr	r5, [pc, #52]	; (8001c10 <__libc_init_array+0x38>)
 8001bdc:	4c0d      	ldr	r4, [pc, #52]	; (8001c14 <__libc_init_array+0x3c>)
 8001bde:	1b64      	subs	r4, r4, r5
 8001be0:	10a4      	asrs	r4, r4, #2
 8001be2:	2600      	movs	r6, #0
 8001be4:	42a6      	cmp	r6, r4
 8001be6:	d109      	bne.n	8001bfc <__libc_init_array+0x24>
 8001be8:	4d0b      	ldr	r5, [pc, #44]	; (8001c18 <__libc_init_array+0x40>)
 8001bea:	4c0c      	ldr	r4, [pc, #48]	; (8001c1c <__libc_init_array+0x44>)
 8001bec:	f000 f818 	bl	8001c20 <_init>
 8001bf0:	1b64      	subs	r4, r4, r5
 8001bf2:	10a4      	asrs	r4, r4, #2
 8001bf4:	2600      	movs	r6, #0
 8001bf6:	42a6      	cmp	r6, r4
 8001bf8:	d105      	bne.n	8001c06 <__libc_init_array+0x2e>
 8001bfa:	bd70      	pop	{r4, r5, r6, pc}
 8001bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c00:	4798      	blx	r3
 8001c02:	3601      	adds	r6, #1
 8001c04:	e7ee      	b.n	8001be4 <__libc_init_array+0xc>
 8001c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c0a:	4798      	blx	r3
 8001c0c:	3601      	adds	r6, #1
 8001c0e:	e7f2      	b.n	8001bf6 <__libc_init_array+0x1e>
 8001c10:	08001c38 	.word	0x08001c38
 8001c14:	08001c38 	.word	0x08001c38
 8001c18:	08001c38 	.word	0x08001c38
 8001c1c:	08001c3c 	.word	0x08001c3c

08001c20 <_init>:
 8001c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c22:	bf00      	nop
 8001c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c26:	bc08      	pop	{r3}
 8001c28:	469e      	mov	lr, r3
 8001c2a:	4770      	bx	lr

08001c2c <_fini>:
 8001c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2e:	bf00      	nop
 8001c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c32:	bc08      	pop	{r3}
 8001c34:	469e      	mov	lr, r3
 8001c36:	4770      	bx	lr
